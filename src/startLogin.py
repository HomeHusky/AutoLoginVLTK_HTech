import subprocess
import pyautogui
import time
import json
import ctypes

from pywinauto import keyboard
import autoClickVLBS
import updateIngame
import GlobalFunction as GF
import os
from pywinauto.keyboard import send_keys
from pywinauto import Desktop
import win32api

pyautogui.FAILSAFE = False

global_time_sleep = GF.load_global_time_sleep()

# Bi·∫øn c·ªù ƒë·ªÉ d·ª´ng qu√° tr√¨nh login
stop_login = False

def disable_mouse():
    ctypes.windll.user32.BlockInput(True)  # V√¥ hi·ªáu h√≥a chu·ªôt v√† b√†n ph√≠m

def enable_mouse():
    ctypes.windll.user32.BlockInput(False)  # K√≠ch ho·∫°t l·∫°i chu·ªôt v√† b√†n ph√≠m

def load_accounts(file_path='accounts.json'):
    with open(os.path.join(GF.join_directory_data(), file_path), 'r') as file:
        data = json.load(file)
        return data['accounts']

def load_auto_tool_path(file_path='accounts.json'):
    with open(os.path.join(GF.join_directory_data(), file_path), 'r') as file:
        data = json.load(file)
        return data['auto_tool_path']

def load_sleepTime(file_path='global_time.json'):
    with open(os.path.join(GF.join_directory_config(), file_path), 'r') as file:
        data = json.load(file)
        return data['sleepTime']

def auto_open_autoVLBS(auto_tool_path, sleepTime):
    try:
        currentAutoName = None
        # try:
        global stop_login
        if stop_login:
            return  # Ki·ªÉm tra c·ªù d·ª´ng

        # pyautogui.hotkey('win', 'r')
        # time.sleep(global_time_sleep)
        # pyautogui.write(auto_tool_path)
        # time.sleep(global_time_sleep)
        # pyautogui.press('enter')
        
        working_dir = os.path.dirname(auto_tool_path)

        subprocess.Popen(auto_tool_path, cwd=working_dir)
        time.sleep(sleepTime[0]['wait_time_open_trainjx'])
        if stop_login:
            return  # Ki·ªÉm tra c·ªù d·ª´ng
        pyautogui.press('enter')
        time.sleep(sleepTime[0]['wait_time_load_autovlbs'])

        if stop_login:
            return  # Ki·ªÉm tra c·ªù d·ª´ng

        auto_names = GF.load_autoNames()
        currentAutoName = GF.checkAutoVlbsBackGroundRunning()
                # currentAutoName = name
        
        # 1. T√¨m c·ª≠a s·ªï theo t√™n
        window = Desktop(backend="win32")[currentAutoName]

        # 2. L·∫•y k√≠ch th∆∞·ªõc c·ª≠a s·ªï hi·ªán t·∫°i
        rect = window.rectangle()
        win_width = rect.width()
        win_height = rect.height()

        # 3. L·∫•y ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh
        screen_width = win32api.GetSystemMetrics(0)
        screen_height = win32api.GetSystemMetrics(1)

        # 4. T√≠nh v·ªã tr√≠ m·ªõi: G√≥c ph·∫£i tr√™n
        new_left = screen_width - win_width
        new_top = 0

        # 5. Di chuy·ªÉn c·ª≠a s·ªï
        window.move_window(new_left, new_top, win_width, win_height, repaint=True)
        
        print(f"ƒê√£ m·ªü AutoVLBS: {auto_tool_path}")
        # T·∫Øt ·ª©ng d·ª•ng JXTrain
        GF.close_application("JXTrain")

        # except Exception as e:
        #     print(f"L·ªói khi b·∫≠t auto!")
        return currentAutoName
    except Exception as e:
        print(f"L·ªói khi m·ªü AutoVLBS: {e}")
        return None

def auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, isChangeServer):
    global stop_login
    if stop_login:
        return  # Ki·ªÉm tra c·ªù d·ª´ng

    # M·ªü game b·∫±ng pyautogui
    # pyautogui.hotkey('win', 'r')
    # time.sleep(global_time_sleep)
    # pyautogui.write(account['game_path'])
    # time.sleep(global_time_sleep)
    # pyautogui.press('enter')

    working_dir = os.path.dirname(account['game_path'])
    
    for attempt in range(3):
        base_length = len(GF.get_all_vpid_vo_lam_windows())
        print(f"Base length of VLTK windows: {base_length}")

        subprocess.Popen(account['game_path'], cwd=working_dir)
        time.sleep(sleepTime[0]['wait_time_open'])
        new_length = len(GF.get_all_vpid_vo_lam_windows())
        print(f"Attempt {attempt + 1}: New length of VLTK windows: {new_length}")
        if new_length > base_length:
            print(f"ƒê√£ m·ªü game: {account['game_path']}")
            break
        else:
            print("L·ªói khi m·ªü game:", account['game_path'])
            print(f"Th·ª≠ l·∫°i l·∫ßn {attempt + 2} ƒë·ªÉ m·ªü game: {account['game_path']}")



    # # M·ªü game b·∫±ng ctypes v√† os
    # path = account['game_path']
    # ctypes.windll.shell32.ShellExecuteW(None, "runas", path, None, None, 1)

    # time.sleep(sleepTime[0]['wait_time_open'])
    try:
        mo_game_lau = account['mo_game_lau']
        if mo_game_lau:
            print(f"Ch·ªù th√™m {sleepTime[0]['wait_time_open2']}s v√¨ server n√†y m·ªü game l√¢u")
            time.sleep(sleepTime[0]['wait_time_open2'])
    except Exception as e:
        time.sleep(sleepTime[0]['wait_time_open'])


    isOpenExe = GF.checkWindowRunning('Vo Lam Truyen Ky')
    print('isOpenExe:', isOpenExe)
    time.sleep(global_time_sleep)

    if isOpenExe == 0:
        # GF.close_application('Vo Lam Truyen Ky')
        GF.close_visible_vltk_app()
        pyautogui.press('enter')
        time.sleep(global_time_sleep)
        return 3
    else:
        # GF.activate_window('Vo Lam Truyen Ky')
        print("ƒê√£ m·ªü game.exe")
        time.sleep(global_time_sleep)

    if stop_login:
        return  # Ki·ªÉm tra c·ªù d·ª´ng

    pyautogui.click()
    # pyautogui.press('enter')
    print("ƒê√£ nh·∫•n b·∫Øt ƒë·∫ßu")
    time.sleep(global_time_sleep)
    

    if stop_login:
        return  # Ki·ªÉm tra c·ªù d·ª´ng

    pyautogui.press('enter')
    print("ƒê√£ nh·∫•n ƒë·ªìng √Ω ·ªü l·∫ßn enter 2")
    time.sleep(global_time_sleep)
    

    if stop_login:
        return  # Ki·ªÉm tra c·ªù d·ª´ng

    # if isChangeServer:
    #     pyautogui.press('down')

    send_keys("{UP}")
    send_keys("{UP}")
    send_keys("{UP}")
    send_keys("{UP}")

    try:
        solanxuong = int(account['so_lan_xuong'])
        for i in range(solanxuong):
            send_keys("{DOWN}")
    except Exception as e:
        send_keys("{DOWN}")

    send_keys("{RIGHT}")

    try:
        solanxuong2 = int(account['so_lan_xuong2'])
        for i in range(solanxuong2):
            send_keys("{DOWN}")
    except Exception as e:
        print("Acc khong co xuong lan 2")

    pyautogui.press('enter')
    print("ƒêang ƒë·ª£i server!")

    time.sleep(sleepTime[0]['wait_time_server'])

    pyautogui.write(account['username'])
    pyautogui.press('tab')
    pyautogui.write(account['password'])
    pyautogui.press('enter')

    print("ƒê√£ nh·∫≠p t√†i kho·∫£n m·∫≠t kh·∫©u!")

    time.sleep(2)
    pyautogui.press('enter')

    time.sleep(sleepTime[0]['wait_time_load'])

    if sleepTime[0]['hide_effects'] == 1:
        pyautogui.hotkey("alt", "f")
        time.sleep(global_time_sleep)
        pyautogui.hotkey("alt", "s")

    InGameName = updateIngame.check_valid_ingame_value(account['username'], currentAutoName)
    if InGameName == False:
        print(f"C√≥ l·ªói khi ƒëƒÉng nh·∫≠p 2: {account['username']}")
        # GF.close_application('Vo Lam Truyen Ky')
        GF.close_visible_vltk_app()
        # pyautogui.press('enter')
        return 2

    if not autoClickVLBS.start_click(account['username'], currentAutoName, isAutoClickVLBS):
        print(f"Account t·ª± t·∫Øt sau khi ch·∫°y auto")
        return 4
    print(f"ƒê√£ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n: {account['username']}")
    return 1
    
def reset_all_accounts_login_status():
    """Reset tr·∫°ng th√°i is_logged_in c·ªßa t·∫•t c·∫£ accounts v·ªÅ False"""
    try:
        filepath = os.path.join(GF.join_directory_data(), 'accounts.json')
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Reset t·∫•t c·∫£ is_logged_in v·ªÅ False
        for account in data['accounts']:
            account['is_logged_in'] = False
        
        # L∆∞u l·∫°i file
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        
        print(f"‚úÖ ƒê√£ reset tr·∫°ng th√°i login c·ªßa {len(data['accounts'])} accounts v·ªÅ False")
    except Exception as e:
        print(f"‚ùå L·ªói reset tr·∫°ng th√°i login: {e}")

def runStartLogin(isAutoClickVLBS, callback, currentAutoName, pass_accounts, callback_login):
    GF.minimizeWindow("Auto Login Htech")
    global stop_login
    stop_login = False  # Reset c·ªù d·ª´ng khi b·∫Øt ƒë·∫ßu
    auto_tool_path = load_auto_tool_path()
    sleepTime = load_sleepTime()
    
    # Ch·ªâ reset tr·∫°ng th√°i is_logged_in khi m√°y v·ª´a kh·ªüi ƒë·ªông
    from modules.system_manager import system_manager
    if system_manager.is_system_just_booted():
        print("üîÑ M√°y v·ª´a kh·ªüi ƒë·ªông, reset tr·∫°ng th√°i login c·ªßa t·∫•t c·∫£ accounts...")
        reset_all_accounts_login_status()
    else:
        print("‚ÑπÔ∏è M√°y ƒë√£ ch·∫°y l√¢u, gi·ªØ nguy√™n tr·∫°ng th√°i login hi·ªán t·∫°i")
    
    # Load accounts
    accounts = load_accounts()
    
    # Ki·ªÉm tra xem c√≥ account n√†o ƒë√£ login ch∆∞a
    any_account_logged_in = any(account.get('is_logged_in', False) for account in accounts)
    
    # Ch·ªâ m·ªü game fix khi ch∆∞a c√≥ account n√†o login
    has_fix_game_server = sleepTime[0].get('has_fix_game_server', 0)
    fix_game_path = sleepTime[0].get('fix_game_path', '')
    
    # if has_fix_game_server and fix_game_path and not any_account_logged_in:
    if has_fix_game_server and fix_game_path:
        print(f"üéÆ Ph√°t hi·ªán server fix game, ƒëang m·ªü: {fix_game_path}")
        try:
            # M·ªü game fix
            subprocess.Popen(fix_game_path)
            print("‚úÖ ƒê√£ m·ªü game fix th√†nh c√¥ng!")
            print("‚è≥ Ch·ªù 15 gi√¢y ƒë·ªÉ game fix kh·ªüi ƒë·ªông...")
            time.sleep(15)
            
            # Press F5 using pywinauto
            send_keys('{F5}')
            print("ƒê√£ nh·∫•n F5 b·∫±ng pywinauto")

            # ·∫®n c·ª≠a s·ªï game fix
            try:
                # L·∫•y t√™n file t·ª´ ƒë∆∞·ªùng d·∫´n (kh√¥ng c√≥ .exe)
                game_name = os.path.basename(fix_game_path).replace('.exe', '')
                print(f"üîç ƒêang t√¨m c·ª≠a s·ªï game: {game_name}")
                
                # T√¨m v√† ·∫©n c·ª≠a s·ªï
                desktop = Desktop(backend="uia")
                windows = desktop.windows()
                
                for window in windows:
                    try:
                        window_title = window.window_text()
                        # Ki·ªÉm tra n·∫øu t√™n game c√≥ trong title
                        if game_name.lower() in window_title.lower():
                            window.minimize()
                            print(f"‚úÖ ƒê√£ ·∫©n c·ª≠a s·ªï game fix: {window_title}")
                            break
                    except:
                        continue
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ·∫©n c·ª≠a s·ªï game fix: {e}")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi m·ªü game fix: {e}")
    elif has_fix_game_server and fix_game_path and any_account_logged_in:
        print(f"‚ÑπÔ∏è ƒê√£ c√≥ account login, b·ªè qua m·ªü game fix")
    
    for account in accounts:
        if account['username'] in pass_accounts:
            continue
        tryLoginNumber = sleepTime[0]['try_number']
        login_success = 0
        isChangedServer = False
        if stop_login:
            break  # D·ª´ng qu√° tr√¨nh n·∫øu c·ªù ƒë∆∞·ª£c ƒë·∫∑t
        for i in range(tryLoginNumber):
            # Ki·ªÉm tra c·ªù d·ª´ng trong v√≤ng l·∫∑p
            if stop_login:
                print("‚è∏ ƒê√£ nh·∫≠n l·ªánh d·ª´ng, tho√°t v√≤ng l·∫∑p login")
                break
            
            if login_success == 1:
                continue
            if account['is_logged_in'] != True:
                if login_success == 2:
                    if not isChangedServer:
                        isChangedServer = True
                        print(f"Login l·∫ßn {i+1} v√† th·ª≠ l·∫°i!")
                        callback_login(account['username'])
                        login_success = auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, True)
                elif login_success == 3:
                    print(f"Login l·∫ßn {i+1} v√¨ tr∆∞·ªõc ƒë√≥ kh√¥ng hi·ªán gamme!")
                    callback_login(account['username'])
                    login_success = auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, False)
                elif login_success == 4:
                    print(f"Login l·∫ßn {i+1} v√¨ tr∆∞·ªõc ƒë√≥ game t·ª± t·∫Øt sau khi ch·∫°y auto!")
                    callback_login(account['username'])
                    login_success = auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, False)
                else:
                    callback_login(account['username'])
                    print(f"Login l·∫ßn {i+1}")
                    login_success = auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, False)
            if i == (tryLoginNumber-1):
                if login_success != 1:
                    # add_server_fail_value('fail_servers.json', account['auto_update_path'])
                    print(f"Server failed for account {account['username']}")
        
        # Ki·ªÉm tra c·ªù d·ª´ng sau m·ªói account
        if stop_login:
            print("‚è∏ ƒê√£ nh·∫≠n l·ªánh d·ª´ng, tho√°t kh·ªèi qu√° tr√¨nh login")
            break
    print("Ho√†n th√†nh login!")
    
    # G·ªçi callback sau khi ho√†n th√†nh
    callback()


def add_server_fail_value(file_path, new_value):
    try:
        # Ki·ªÉm tra n·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c file r·ªóng
        if not os.path.exists(os.path.join(GF.join_directory_data(), file_path)) or os.stat(os.path.join(GF.join_directory_data(), file_path)).st_size == 0:
            # T·∫°o file m·ªõi v·ªõi c·∫•u tr√∫c m·∫∑c ƒë·ªãnh
            with open(os.path.join(GF.join_directory_data(), file_path), 'w', encoding='utf-8') as file:
                json.dump({"server_fail": []}, file, ensure_ascii=False, indent=4)
            print("File JSON ch∆∞a t·ªìn t·∫°i ho·∫∑c r·ªóng. ƒê√£ t·∫°o file m·ªõi v·ªõi c·∫•u tr√∫c m·∫∑c ƒë·ªãnh.")

        # B∆∞·ªõc 1: ƒê·ªçc file JSON
        data = GF.read_json_file(file_path)

        # B∆∞·ªõc 2: Th√™m gi√° tr·ªã m·ªõi v√†o m·∫£ng server_fail
        if "server_fail" in data:
            data["server_fail"].append(new_value)
        else:
            data["server_fail"] = [new_value]  # T·∫°o m·ªõi m·∫£ng n·∫øu kh√¥ng t·ªìn t·∫°i

        # B∆∞·ªõc 3: Ghi l·∫°i n·ªôi dung ƒë√£ c·∫≠p nh·∫≠t v√†o file JSON
        with open(os.path.join(GF.join_directory_data(), file_path), 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

        print("ƒê√£ th√™m gi√° tr·ªã v√†o m·∫£ng server_fail th√†nh c√¥ng!")
        print(data['server_fail'])

    except Exception as e:
        print(f"C√≥ l·ªói x·∫£y ra: {e}")

def stop():
    global stop_login
    stop_login = True  # ƒê·∫∑t c·ªù d·ª´ng th√†nh True

# if __name__ == "__main__":
#     runStartLogin()
