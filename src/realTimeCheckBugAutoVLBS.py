from pywinauto import Application
from pywinauto import Desktop
import json
import smtplib
import ssl
import time
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os  # Th√™m th∆∞ vi·ªán os ƒë·ªÉ ki·ªÉm tra file t·ªìn t·∫°i
import GlobalFunction as GF
import threading
from tkinter import messagebox
import copy
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


# === BI·∫æN TO√ÄN C·ª§C ===
stop_flag = False
gom_accounts_info_data = []
gom_account_file = 'gom_accounts.json'
previous_data = {}  # D√πng ƒë·ªÉ l∆∞u tr·ªØ s·ªë d∆∞ ti·ªÅn c·ªßa c√°c t√†i kho·∫£n tr∆∞·ªõc khi ki·ªÉm tra

EMAIL_ADDRESS = "htechvlnotification@gmail.com"
EMAIL_PASSWORD = "btpwkapwzdknnqfl"
RECIPIENT_EMAIL = "vitrannhat@gmail.com"

def send_email_report(report_data, loop_time_str, ten_may):
    """
    G·ª≠i email b√°o c√°o k·∫øt qu·∫£ ki·ªÉm tra t√†i kho·∫£n.

    :param report_data: List ch·ª©a c√°c dict nh∆∞:
        [
            {"account": "PT2√ôTL√ôHT11", "old": 900, "new": 979.97, "status": "TƒÉng"},
            ...
        ]
    :param loop_time_str: Th·ªùi gian ki·ªÉm tra (v√≠ d·ª•: "2025-07-09 03:00:00")
    """

    # ===== So·∫°n HTML n·ªôi dung email =====
    html_rows = ""
    for item in report_data:
        color = {"TƒÉng": "green", "Gi·∫£m": "red", "Kh√¥ng ƒë·ªïi": "gray"}.get(item["status"], "black")
        html_rows += f"""
            <tr>
                <td>{item['account']}</td>
                <td>{item['old']}</td>
                <td>{item['new']}</td>
                <td style="color:{color}; font-weight: bold;">{item['status']}</td>
            </tr>
        """

    html_content = f"""
    <html>
        <body>
            <h2 style="color: #2e6c80;">üìä B√°o c√°o ki·ªÉm tra t√†i kho·∫£n VLTK m√°y {ten_may}</h2>
            <p><b>Th·ªùi gian ki·ªÉm tra:</b> {loop_time_str}</p>
            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse;">
                <thead style="background-color: #f2f2f2;">
                    <tr>
                        <th>T√†i kho·∫£n</th>
                        <th>Ti·ªÅn c≈©</th>
                        <th>Ti·ªÅn m·ªõi</th>
                        <th>Tr·∫°ng th√°i</th>
                    </tr>
                </thead>
                <tbody>
                    {html_rows}
                </tbody>
            </table>
            <p style="margin-top: 20px;">üìß ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng ki·ªÉm tra nh√¢n v·∫≠t.</p>
        </body>
    </html>
    """

    # ===== G·ª≠i email =====
    msg = MIMEMultipart("alternative")
    msg["Subject"] = f"B√°o c√°o ki·ªÉm tra VLTK l√∫c {loop_time_str}"
    msg["From"] = EMAIL_ADDRESS
    msg["To"] = RECIPIENT_EMAIL

    msg.attach(MIMEText(html_content, "html"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)
            print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")

def load_gom_accounts(filepath = 'accounts.json'):
    with open(os.path.join(GF.join_directory_data(), filepath), 'r', encoding='utf-8') as file:
        data = json.load(file)

    # B∆∞·ªõc 2: L·∫•y c√°c t√†i kho·∫£n c√≥ is_logged_in = True v√† is_gom_tien = 1
    filtered_ingames = [account['ingame'] for account in data['accounts'] if account['is_logged_in'] and account['is_gom_tien'] == 1]

    # In k·∫øt qu·∫£
    return filtered_ingames

def check_accounts_money():
    global gom_accounts_info_data
    gom_accounts = load_gom_accounts()
    try:
        list_control = None
        for attempt in range(3):
            try:
                print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
                backend = GF.get_backend()
                list_control = Application(backend="uia").connect(title_re='^Quan ly nhan vat.*').window(title_re='^Quan ly nhan vat.*').child_window(control_type="List")
                print("K·∫øt n·ªëi th√†nh c√¥ng!")
                break  # N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
            except Exception as e:
                print(f"L·ªói khi k·∫øt n·ªëi (l·∫ßn {attempt + 1}): {e}")
                time.sleep(1)  # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

        items = list_control.children(control_type="ListItem")
        gom_accounts_info_data = []
        for item in items:
            nextItem = False
            array_name = None
            newdata = []
            countChild = 0
            for child in item.children():
                
                if countChild == 1:
                    array_name = child.window_text()  # T√™n t√†i kho·∫£n
                    if array_name not in gom_accounts:
                        countChild += 1
                        nextItem = True
                        continue
                    newdata.append(child.window_text())
                elif countChild == 2:
                    newdata.append(child.window_text())  # tong_tien
                # elif countChild == 3:
                #     newdata.append(child.window_text())  # thu_nhap
                # elif countChild == 4:
                #     newdata.append(child.window_text())  # thoi_gian
                # elif countChild == 6:
                #     newdata.append(child.window_text())  # TDP/C
                # elif countChild == 8:
                #     newdata.append(child.window_text())  # ban_do
                # elif countChild == 9:
                #     newdata.append(child.window_text())  # server
                countChild += 1

            if nextItem: continue
            # L·∫•y th·ªùi gian hi·ªán t·∫°i
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            # Th√™m th√¥ng tin th·ªùi gian v√†o newdata
            newdata.append(current_time)
            # Chuy·ªÉn ƒë·ªïi newdata th√†nh chu·ªói JSON
            # json_data = json.dumps(newdata, ensure_ascii=False)
            # Ghi d·ªØ li·ªáu v√†o file JSON 
            gom_accounts_info_data.append(newdata)
        print(f"D·ªØ li·ªáu: {gom_accounts_info_data}")
        # messagebox.showinfo("D·ªØ li·ªáu:", gom_accounts_info_data)
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra t√†i kho·∫£n: {e}")

def auto_check_loop(minutes, ten_may):
    global stop_flag, gom_accounts_info_data, previous_data
    print(f"üîÅ B·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª± ƒë·ªông m·ªói {minutes} ph√∫t...")

    known_accounts = set()  # l∆∞u t√†i kho·∫£n ƒë√£ t·ª´ng xu·∫•t hi·ªán
    missing_accounts = set()  # l∆∞u t√†i kho·∫£n ƒë√£ b·ªã vƒÉng

    while not stop_flag:
        check_accounts_money()
        new_data = copy.deepcopy(gom_accounts_info_data)
        loop_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report = []

        # === T·∫°o set t√†i kho·∫£n hi·ªán t·∫°i
        current_accounts = set(acc[0] for acc in new_data)

        # === Ki·ªÉm tra t·ª´ng t√†i kho·∫£n trong d·ªØ li·ªáu m·ªõi
        for acc in new_data:
            name = acc[0]
            money = float(acc[1])
            timestamp = acc[2]

            if name in previous_data:
                old_money = previous_data[name]
                if money > old_money:
                    status = "TƒÉng"
                    print(f"[{timestamp}] ‚úÖ {name} tƒÉng ti·ªÅn: {old_money} ‚Üí {money}")
                elif money < old_money:
                    status = "Gi·∫£m"
                    print(f"[{timestamp}] ‚ö†Ô∏è {name} gi·∫£m ti·ªÅn: {old_money} ‚Üí {money}")
                else:
                    status = "Kh√¥ng ƒë·ªïi"
                    print(f"[{timestamp}] ‚è∏Ô∏è {name} kh√¥ng ƒë·ªïi: {money}")
            elif name in missing_accounts:
                status = "M·ªõi"
                print(f"[{timestamp}] üîÑ {name} quay l·∫°i sau khi b·ªã vƒÉng. Ti·ªÅn: {money}")
                missing_accounts.remove(name)
            else:
                status = "M·ªõi"
                print(f"[{timestamp}] üÜï {name} m·ªõi, ti·ªÅn: {money}")

            report.append({
                "account": name,
                "old": previous_data.get(name, 0),
                "new": money,
                "status": status
            })

            # L∆∞u v√†o b·ªô nh·ªõ
            previous_data[name] = money
            known_accounts.add(name)

        # === Ki·ªÉm tra c√°c t√†i kho·∫£n b·ªã m·∫•t
        for known_name in known_accounts:
            if known_name not in current_accounts:
                print(f"[{loop_time_str}] ‚ùå {known_name} b·ªã vƒÉng game (kh√¥ng c√≤n trong danh s√°ch).")
                report.append({
                    "account": known_name,
                    "old": previous_data[known_name],
                    "new": 0,
                    "status": "VƒÉng game"
                })
                missing_accounts.add(known_name)

        # === G·ª≠i email
        send_email_report(report, loop_time_str, ten_may)

        # === ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo
        for i in range(minutes * 60):
            if stop_flag:
                print("üõë ƒê√£ d·ª´ng ki·ªÉm tra.")
                return
            print(f"{minutes * 60 - i} gi√¢y c√≤n l·∫°i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            time.sleep(1)

def start_checking(minutes, ten_may):
    global stop_flag
    stop_flag = False
    t = threading.Thread(target=auto_check_loop, args=(minutes,ten_may), daemon=True)
    t.start()
    print("üîÅ B·∫Øt ƒë·∫ßu ki·ªÉm tra...")

def stop_checking():
    global stop_flag
    stop_flag = True
    print("‚õî Y√™u c·∫ßu d·ª´ng ki·ªÉm tra.")

if __name__ == "__main__":
    check_accounts_money()

