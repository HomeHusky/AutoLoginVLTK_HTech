from pywinauto import Application
from pywinauto import Desktop
import json
import smtplib
import ssl
import time
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os  # Th√™m th∆∞ vi·ªán os ƒë·ªÉ ki·ªÉm tra file t·ªìn t·∫°i
import GlobalFunction as GF
import threading
from tkinter import messagebox
import copy
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from notifier import send_discord_report
from fixErrorAccounts import getLowBoodAccounts, fixLowBloodAccountsWithRepair, fixErrorAccounts, relogin_lost_accounts, fixLowBloodAccounts, fix_account_stuck_on_map_Sa_Mac, run_kill_hung_vo_lam
from tkinter import ttk
import tkinter as tk
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
import mongoConnection as MONGO_CONN
from modules.mongodb_manager import mongodb_manager

# === BI·∫æN TO√ÄN C·ª§C ===
kpi_1m = (48/24)/60  # KPI m·∫∑c ƒë·ªãnh cho t√†i kho·∫£n th∆∞·ªùng (Kv/ph√∫t) - 1 gi·ªù tƒÉng 2 Kv
kpi_gom_1m = (96/24)/60  # KPI cho t√†i kho·∫£n gom ti·ªÅn (Kv/ph√∫t) - 1 gi·ªù tƒÉng 4 Kv (G·∫•p ƒë√¥i)
stop_flag = False
gom_accounts_info_data = []
gom_account_file = 'gom_accounts.json'
gom_accounts_list = []  # Danh s√°ch t√†i kho·∫£n gom ti·ªÅn
previous_data = {}  # D√πng ƒë·ªÉ l∆∞u tr·ªØ s·ªë d∆∞ ti·ªÅn c·ªßa c√°c t√†i kho·∫£n tr∆∞·ªõc khi ki·ªÉm tra

EMAIL_ADDRESS = "htechvlnotification@gmail.com"
EMAIL_PASSWORD = "btpwkapwzdknnqfl"
RECIPIENT_EMAIL = "vitrannhat@gmail.com"

def format_time_to_minute_second(seconds: int) -> str:
    """
    Chuy·ªÉn s·ªë gi√¢y th√†nh chu·ªói d·∫°ng 'MM ph√∫t SS gi√¢y'.
    """
    m, s = divmod(seconds, 60)
    return f"{m:02d} ph√∫t {s:02d} gi√¢y"

def update_accounts_online_status(current_accounts):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i is_logged_in trong accounts.json
    d·ª±a v√†o danh s√°ch accounts ƒëang online
    """
    try:
        filepath = os.path.join(GF.join_directory_data(), 'accounts.json')
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        for account in data['accounts']:
            ingame = account['ingame']
            if ingame in current_accounts:
                account['is_logged_in'] = True
            else:
                account['is_logged_in'] = False
        
        # L∆∞u l·∫°i file
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i online cho {len(current_accounts)} accounts")
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i online: {e}")

def update_mongodb_server_status():
    """
    C·∫≠p nh·∫≠t th√¥ng tin m√°y ch·ªß l√™n MongoDB
    T·ª± ƒë·ªông t·∫°o collection 'server_status' n·∫øu ch∆∞a t·ªìn t·∫°i
    """
    try:
        print("üì§ ƒêang c·∫≠p nh·∫≠t th√¥ng tin m√°y ch·ªß l√™n MongoDB...")
        
        # K·∫øt n·ªëi v√† c·∫≠p nh·∫≠t
        if mongodb_manager.connect():
            success = mongodb_manager.update_server_status(collection_name="server_status")
            mongodb_manager.close()
            
            if success:
                print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t MongoDB th√†nh c√¥ng!")
            else:
                print("‚ùå C·∫≠p nh·∫≠t MongoDB th·∫•t b·∫°i!")
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB!")
            
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t MongoDB: {e}")

# === C√ÅC H√ÄM TO√ÄN C·ª§C ===
# H√†m n√†y s·∫Ω t·∫£i danh s√°ch t√†i kho·∫£n t·ª´ file accounts.json
# v√† l·ªçc ra c√°c t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p v√† c√≥ is_gom_tien = 1
# Tr·∫£ v·ªÅ dictionary: {ingame: kpi_gom}
def load_gom_accounts(filepath = 'accounts.json'):
    with open(os.path.join(GF.join_directory_data(), filepath), 'r', encoding='utf-8') as file:
        data = json.load(file)

    # L·∫•y c√°c t√†i kho·∫£n c√≥ is_logged_in = True v√† is_gom_tien = 1
    # Tr·∫£ v·ªÅ dict v·ªõi ingame v√† KPI ri√™ng (n·∫øu c√≥)
    gom_accounts_dict = {}
    for account in data['accounts']:
        if account['is_logged_in'] and account['is_gom_tien'] == 1:
            ingame = account['ingame']
            kpi_gom = account.get('kpi_gom', '')  # L·∫•y KPI ri√™ng, n·∫øu kh√¥ng c√≥ th√¨ ''
            gom_accounts_dict[ingame] = kpi_gom
    
    return gom_accounts_dict

# === L∆ØU D·ªÆ LI·ªÜU V√ÄO FILE ===
def save_snapshot(ten_may, report):
    folder = "data_logs"
    os.makedirs(folder, exist_ok=True)

    file_path = os.path.join(folder, f"{ten_may}_log.json")
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Format d·ªØ li·ªáu
    snapshot = {
        "time": now_str,
        "accounts": [{"account": acc["account"], "money": acc["new"]} for acc in report]
    }

    data = []
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except:
                data = []

    data.append(snapshot)

    # Ghi l·∫°i
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === L∆ØU D·ªÆ LI·ªÜU V√ÄO MONGODB ===
def save_money_data_to_mongo(ten_may, total_profit):
    """
    L∆∞u d·ªØ li·ªáu ti·ªÅn t·ª´ng account l√™n MongoDB
    :param json_data: dict ki·ªÉu {"acc1": [{"money": .., "time": ..}, ...], ...}
    :param ten_may: t√™n m√°y (str)
    """
    client, collection = MONGO_CONN.connect_mongo()
    
    document = {
        "ten_may": ten_may,
        "loi_nhuan": total_profit,
        "time": datetime.now()
    }
    collection.insert_one(document)
    
    client.close()

# === T√çNH TO√ÅN THU NH·∫¨P TRONG 24 GI·ªú QUA TR√äN MONGODB===
def get_24h_income_from_mongo(ten_may):
    """
    T√≠nh t·ªïng ti·ªÅn tƒÉng c·ªßa t·∫•t c·∫£ account trong 24h g·∫ßn nh·∫•t cho m·ªôt m√°y.
    :param ten_may: t√™n m√°y (str)
    :return: t·ªïng ti·ªÅn tƒÉng (float)
    """
    client, collection = MONGO_CONN.connect_mongo()

    now = datetime.now()
    time_24h_ago = now - timedelta(hours=24)

    total_income = 0

    # L·∫•y danh s√°ch c√°c account duy nh·∫•t c·ªßa m√°y
    accounts = collection.distinct("account", {"ten_may": ten_may})

    for acc in accounts:
        # L·∫•y d√≤ng m·ªõi nh·∫•t
        latest = collection.find_one(
            {"ten_may": ten_may, "account": acc},
            sort=[("time", -1)]
        )

        # L·∫•y d√≤ng g·∫ßn nh·∫•t tr∆∞·ªõc m·ªëc 24h
        old = collection.find_one(
            {
                "ten_may": ten_may,
                "account": acc,
                "time": {"$lte": time_24h_ago}
            },
            sort=[("time", -1)]
        )

        if latest and old:
            income = latest["money"] - old["money"]
            total_income += income
    client.close()
    return total_income

# === T√çNH TO√ÅN THU NH·∫¨P TRONG TH√ÅNG HI·ªÜN T·∫†I TR√äN MONGODB===
def get_month_income(ten_may):
    """
    T√≠nh t·ªïng ti·ªÅn tƒÉng trong th√°ng hi·ªán t·∫°i cho m·ªôt m√°y.
    So s√°nh d√≤ng m·ªõi nh·∫•t v·ªõi d√≤ng ƒë·∫ßu ti√™n trong th√°ng.
    :param ten_may: t√™n m√°y (str)
    :return: t·ªïng ti·ªÅn tƒÉng trong th√°ng (float)
    """
    client, collection = MONGO_CONN.connect_mongo()

    now = datetime.now()
    start_of_month = datetime(now.year, now.month, 1)

    total_income = 0
    accounts = collection.distinct("account", {"ten_may": ten_may})

    for acc in accounts:
        # D√≤ng m·ªõi nh·∫•t trong th√°ng
        latest = collection.find_one(
            {
                "ten_may": ten_may,
                "account": acc,
                "time": {"$gte": start_of_month}
            },
            sort=[("time", -1)]
        )

        # D√≤ng ƒë·∫ßu ti√™n trong th√°ng
        first = collection.find_one(
            {
                "ten_may": ten_may,
                "account": acc,
                "time": {"$gte": start_of_month}
            },
            sort=[("time", 1)]
        )

        if latest and first:
            income = latest["money"] - first["money"]
            total_income += income

    client.close()
    return total_income

# === T√ìM T·∫ÆT THU NH·∫¨P TRONG 24 GI·ªú QUA ===
def summarize_last_24h_income(ten_may):
    file_path = f"data_logs/{ten_may}_log.json"
    if not os.path.exists(file_path):
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu.")
        return

    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    if len(data) < 2:
        print("‚ö†Ô∏è Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh.")
        return

    now = datetime.now()
    threshold_time = now - timedelta(hours=24)

    # T√¨m snapshot c≈© nh·∫•t tr∆∞·ªõc ng∆∞·ª°ng
    oldest = None
    latest = data[-1]

    for entry in reversed(data):
        entry_time = datetime.strptime(entry["time"], "%Y-%m-%d %H:%M:%S")
        if entry_time <= threshold_time:
            oldest = entry
            break

    if not oldest:
        print("‚ö†Ô∏è Kh√¥ng c√≥ snapshot ƒë·ªß c≈© (24h tr∆∞·ªõc).")
        return

    # T√≠nh thu nh·∫≠p
    old_money_map = {acc["account"]: acc["money"] for acc in oldest["accounts"]}
    new_money_map = {acc["account"]: acc["money"] for acc in latest["accounts"]}

    total_income = 0
    for acc, new_money in new_money_map.items():
        old_money = old_money_map.get(acc, 0)
        income = new_money - old_money
        print(f"üí∞ {acc}: {old_money:.2f} ‚Üí {new_money:.2f} = +{income:.2f}")
        total_income += income

    print(f"\nüìä T·ªïng ti·ªÅn m√°y {ten_may} ki·∫øm ƒë∆∞·ª£c trong 24 gi·ªù qua: {total_income:.2f} [v·∫°n]")

# === X√ìA C√ÅC SNAPSHOT C≈® H∆†N M·ªòT S·ªê NG√ÄY ===
def clean_old_snapshots(ten_may, days_to_keep=2, folder="data_logs"):
    file_path = os.path.join(folder, f"{ten_may}_log.json")
    if not os.path.exists(file_path):
        return

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc {file_path}")
        return

    cutoff_time = datetime.now() - timedelta(days=days_to_keep)
    new_data = []

    for entry in data:
        try:
            entry_time = datetime.strptime(entry["time"], "%Y-%m-%d %H:%M:%S")
            if entry_time >= cutoff_time:
                new_data.append(entry)
        except Exception as e:
            print(f"‚ö†Ô∏è B·ªè qua d√≤ng l·ªói: {e}")

    # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
    if len(new_data) != len(data):
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(new_data, f, ensure_ascii=False, indent=2)
        print(f"üßπ ƒê√£ x√≥a {len(data) - len(new_data)} snapshot c≈© trong {file_path}")

# === L·∫§Y B·∫¢NG L·ª¢I NHU·∫¨N TRONG 24 GI·ªú QUA ===
# H√†m n√†y s·∫Ω l·∫•y d·ªØ li·ªáu t·ª´ file log v√† t·∫°o b·∫£ng l·ª£i nhu·∫≠n cho c√°c t√†i kho·∫£n trong 24 gi·ªù qua
# Tr·∫£ v·ªÅ danh s√°ch c√°c dict v·ªõi c·∫•u tr√∫c:
def get_profit_table_last_24h(ten_may):
    file_path = f"data_logs/{ten_may}_log.json"
    if not os.path.exists(file_path):
        return []

    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    if len(data) < 2:
        return []

    now = datetime.now()
    time_24h_ago = now - timedelta(hours=24)

    # T√¨m snapshot s·ªõm nh·∫•t >= 24h tr∆∞·ªõc
    start_snapshot = None
    for entry in data:
        entry_time = datetime.strptime(entry["time"], "%Y-%m-%d %H:%M:%S")
        if entry_time <= time_24h_ago:
            start_snapshot = entry
        else:
            break

    if not start_snapshot:
        return []

    end_snapshot = data[-1]  # snapshot hi·ªán t·∫°i

    # Map acc ‚Üí money
    start_map = {acc["account"]: acc["money"] for acc in start_snapshot["accounts"]}
    end_map = {acc["account"]: acc["money"] for acc in end_snapshot["accounts"]}

    # T·∫°o b·∫£ng d·∫°ng array cho hi·ªÉn th·ªã UI
    profit_table = []
    for acc, end_money in end_map.items():
        start_money = start_map.get(acc, 0)
        profit = end_money - start_money
        profit_table.append({
            "account": acc,
            "start": start_money,
            "end": end_money,
            "profit": profit,
            "start_time": start_snapshot["time"],
            "end_time": end_snapshot["time"]
        })

    return profit_table

# === RENDER B·∫¢NG L·ª¢I NHU·∫¨N TRONG 24 GI·ªú QUA TR√äN GIAO DI·ªÜN ===
def render_profit_table_ui(frame, ten_may):
    for widget in frame.winfo_children():
        widget.destroy()  # X√≥a b·∫£ng c≈©

    table = get_profit_table_last_24h(ten_may)

    # T√≠nh t·ªïng profit
    total_profit = sum(row["profit"] for row in table)

    # T·∫°o label hi·ªÉn th·ªã t·ªïng l·ª£i nhu·∫≠n
    label = tk.Label(
        frame,
        text=f"{total_profit:+.2f}",
        font=("Arial", 14, "bold"),
        fg="green" if total_profit >= 0 else "red"
    )
    label.pack(expand=True, fill="both", padx=10, pady=10)

def render_current_online_accounts(frame, nameAutoVLBS):
    account_online = load_len_accounts_online(nameAutoVLBS)
    # T·∫°o label hi·ªÉn th·ªã t·ªïng l·ª£i nhu·∫≠n
    label = tk.Label(
        frame,
        text=f"{account_online} online",
        font=("Arial", 14, "bold"),
        fg="green" if account_online > 0 else "red"
    )
    label.pack(expand=True, fill="both", padx=10, pady=10)

def load_len_accounts_online(nameAutoVLBS):
    try:
        list_control = None
        GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS)
        app = Application(backend="uia").connect(title_re=nameAutoVLBS)
        dlg = app.window(title_re=nameAutoVLBS)

        # L·∫•y t·∫•t c·∫£ control lo·∫°i List trong c·ª≠a s·ªï
        list_controls = dlg.descendants(control_type="List")

        # Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† l·∫•y theo ƒëi·ªÅu ki·ªán
        if len(list_controls) == 3:
            print("C√≥ 3 List control, l·∫•y c√°i ƒë·∫ßu ti√™n.")
            list_control = list_controls[2]  # l·∫•y c√°i ƒë·∫ßu ti√™n
        else:
            list_control = dlg.child_window(control_type="List")  # m·∫∑c ƒë·ªãnh n·∫øu ch·ªâ c√≥ 1   

        items = list_control.children(control_type="ListItem")
        return len(items)
    except Exception as e:
        print(f"L·ªói khi l·∫•y s·ªë l∆∞·ª£ng t√†i kho·∫£n online: {e}")
        return 0

# === H√ÄM G·ª¨I MAIL ===
# H√†m n√†y s·∫Ω g·ª≠i email b√°o c√°o k·∫øt qu·∫£ ki·ªÉm tra t√†i kho·∫£n
def send_email_report(report_data, loop_time_str, ten_may):
    """
    G·ª≠i email b√°o c√°o k·∫øt qu·∫£ ki·ªÉm tra t√†i kho·∫£n.

    :param report_data: List ch·ª©a c√°c dict nh∆∞:
        [
            {"account": "PT2√ôTL√ôHT11", "old": 900, "new": 979.97, "status": "TƒÉng"},
            ...
        ]
    :param loop_time_str: Th·ªùi gian ki·ªÉm tra (v√≠ d·ª•: "2025-07-09 03:00:00")
    """

    # ===== So·∫°n HTML n·ªôi dung email =====
    html_rows = ""
    for item in report_data:
        color = {"TƒÉng": "green", "Gi·∫£m": "red", "Kh√¥ng ƒë·ªïi": "gray"}.get(item["status"], "black")
        html_rows += f"""
            <tr>
                <td>{item['account']}</td>
                <td>{item['old']}</td>
                <td>{item['new']}</td>
                <td style="color:{color}; font-weight: bold;">{item['status']}</td>
            </tr>
        """

    html_content = f"""
    <html>
        <body>
            <h2 style="color: #2e6c80;">üìä B√°o c√°o ki·ªÉm tra t√†i kho·∫£n VLTK m√°y {ten_may}</h2>
            <p><b>Th·ªùi gian ki·ªÉm tra:</b> {loop_time_str}</p>
            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse;">
                <thead style="background-color: #f2f2f2;">
                    <tr>
                        <th>T√†i kho·∫£n</th>
                        <th>Ti·ªÅn c≈©</th>
                        <th>Ti·ªÅn m·ªõi</th>
                        <th>Tr·∫°ng th√°i</th>
                    </tr>
                </thead>
                <tbody>
                    {html_rows}
                </tbody>
            </table>
            <p style="margin-top: 20px;">üìß ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng ki·ªÉm tra nh√¢n v·∫≠t.</p>
        </body>
    </html>
    """

    # ===== G·ª≠i email =====
    msg = MIMEMultipart("alternative")
    msg["Subject"] = f"B√°o c√°o ki·ªÉm tra VLTK l√∫c {loop_time_str}"
    msg["From"] = EMAIL_ADDRESS
    msg["To"] = RECIPIENT_EMAIL

    msg.attach(MIMEText(html_content, "html"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(msg)
            print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")

def sleep_until_next_hour():
    now = datetime.now()
    # Calculate next hour (add 1 hour, set minutes and seconds to 0)
    next_hour = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
    seconds_to_sleep = (next_hour - now).total_seconds()
    print(f"‚è≥ Sleeping for {int(seconds_to_sleep)} seconds until next hour: {next_hour.strftime('%H:%M:%S')}")
    time.sleep(seconds_to_sleep)

# === KI·ªÇM TRA T√ÄI KHO·∫¢N V√Ä L·∫§Y D·ªÆ LI·ªÜU ===
# H√†m n√†y s·∫Ω k·∫øt n·ªëi v·ªõi ·ª©ng d·ª•ng, l·∫•y danh s√°ch t√†i kho·∫£n v√† s·ªë d∆∞ ti·ªÅn c·ªßa ch√∫ng
# L∆∞u √Ω: H√†m n√†y c·∫ßn ƒë∆∞·ª£c g·ªçi trong m·ªôt lu·ªìng ri√™ng bi·ªát ƒë·ªÉ tr√°nh l√†m treo giao di·ªán ch√≠nh
def check_accounts_money():
    global gom_accounts_info_data
    gom_accounts = load_gom_accounts()
    try:
        list_control = None
        for attempt in range(3):
            try:
                print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
                # backend = GF.get_backend()
                list_control = Application(backend="uia").connect(title_re='^Quan ly nhan vat.*').window(title_re='^Quan ly nhan vat.*').child_window(control_type="List")
                print("K·∫øt n·ªëi th√†nh c√¥ng!")
                break  # N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
            except Exception as e:
                print(f"L·ªói khi k·∫øt n·ªëi (l·∫ßn {attempt + 1}): {e}")
                # backend = GF.get_backend()
                nameAutoVLBS = GF.getNameAutoVLBS()
                if not GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS):
                    app = Application(backend="uia").connect(title_re=nameAutoVLBS)
                    dlg = app.window(title_re=nameAutoVLBS)

                    # L·∫•y t·∫•t c·∫£ control lo·∫°i List trong c·ª≠a s·ªï
                    list_controls = dlg.descendants(control_type="List")

                    # Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† l·∫•y theo ƒëi·ªÅu ki·ªán
                    if len(list_controls) == 3:
                        print("C√≥ 3 List control, l·∫•y c√°i ƒë·∫ßu ti√™n.")
                        list_control = list_controls[2]  # l·∫•y c√°i ƒë·∫ßu ti√™n
                    else:
                        list_control = dlg.child_window(control_type="List")  # m·∫∑c ƒë·ªãnh n·∫øu ch·ªâ c√≥ 1   
                    if not list_control:
                        print("Kh√¥ng t√¨m th·∫•y b·∫£ng!")
                    else:
                        try:
                            # C√°ch 1: D√πng ph√≠m Home
                            list_control.set_focus()
                            list_control.type_keys("{HOME}")
                            
                            # Ho·∫∑c c√°ch 2: D√πng scroll pattern (n·∫øu ·ª©ng d·ª•ng h·ªó tr·ª£)
                            # list_control.iface_scroll.SetScrollPercent(horizontalPercent=None, verticalPercent=0)
                            
                            time.sleep(0.5)  # ƒê·ª£i scroll ho√†n th√†nh
                        except Exception as e:
                            print(f"L·ªói khi scroll: {str(e)}")
                        # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
                        # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
                        items = list_control.children(control_type="ListItem")
                        if items:
                            items[0].right_click_input()
                        else:
                            print("Kh√¥ng c√≥ m·ª•c n√†o trong danh s√°ch!")
                    time.sleep(1)

        items = list_control.children(control_type="ListItem")
        gom_accounts_info_data = []
        for item in items:
            nextItem = False
            array_name = None
            newdata = []
            countChild = 0
            for child in item.children():
                
                if countChild == 1:
                    array_name = child.window_text()  # T√™n t√†i kho·∫£n
                    if array_name not in gom_accounts:
                        countChild += 1
                        nextItem = True
                        continue
                    newdata.append(child.window_text())
                elif countChild == 2:
                    newdata.append(child.window_text())  # tong_tien
                # elif countChild == 3:
                #     newdata.append(child.window_text())  # thu_nhap
                # elif countChild == 4:
                #     newdata.append(child.window_text())  # thoi_gian
                # elif countChild == 6:
                #     newdata.append(child.window_text())  # TDP/C
                # elif countChild == 8:
                #     newdata.append(child.window_text())  # ban_do
                # elif countChild == 9:
                #     newdata.append(child.window_text())  # server
                countChild += 1

            if nextItem: continue
            # L·∫•y th·ªùi gian hi·ªán t·∫°i
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            # Th√™m th√¥ng tin th·ªùi gian v√†o newdata
            newdata.append(current_time)
            # Chuy·ªÉn ƒë·ªïi newdata th√†nh chu·ªói JSON
            # json_data = json.dumps(newdata, ensure_ascii=False)
            # Ghi d·ªØ li·ªáu v√†o file JSON 
            gom_accounts_info_data.append(newdata)
        print(f"D·ªØ li·ªáu: {gom_accounts_info_data}")
        # messagebox.showinfo("D·ªØ li·ªáu:", gom_accounts_info_data)
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra t√†i kho·∫£n: {e}")

# === V√íNG L·∫∂P KI·ªÇM TRA T·ª∞ ƒê·ªòNG ===
# H√†m n√†y s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra t√†i kho·∫£n m·ªói `minutes` ph√∫t
# v√† g·ª≠i b√°o c√°o qua email ho·∫∑c Discord n·∫øu c√≥ thay ƒë·ªïi
# ten_may: T√™n m√°y ƒë·ªÉ hi·ªÉn th·ªã trong b√°o c√°o
def auto_check_loop(minutes, ten_may):
    global stop_flag, gom_accounts_info_data, previous_data, gom_accounts_list
    
    # Load danh s√°ch t√†i kho·∫£n gom ti·ªÅn v·ªõi KPI ri√™ng
    gom_accounts_list = load_gom_accounts()  # Dict: {ingame: kpi_gom}
    print(f"üìã Danh s√°ch t√†i kho·∫£n GOM v·ªõi KPI:")
    for ingame, kpi in gom_accounts_list.items():
        kpi_display = kpi if kpi else "default"
        print(f"   - {ingame}: {kpi_display} Kv/day")
    print(f"üîÅ S·∫Ω b·∫Øt ƒë·∫ßu ki·ªÉm tra v√†o gi·ªù ch·∫µn ti·∫øp theo...")

    sleep_until_next_hour()  # Wait until the next even hour

    print(f"üîÅ B·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª± ƒë·ªông m·ªói {minutes} ph√∫t...")

    known_accounts = set()  # l∆∞u t√†i kho·∫£n ƒë√£ t·ª´ng xu·∫•t hi·ªán
    missing_accounts = set()  # l∆∞u t√†i kho·∫£n ƒë√£ b·ªã vƒÉng
    error_accounts = set()  # l∆∞u t√†i kho·∫£n c√≥ l·ªói
    is_first_run = True  # Bi·∫øn ƒë·ªÉ x√°c ƒë·ªãnh l·∫ßn ch·∫°y ƒë·∫ßu ti√™n

    while not stop_flag:
        check_accounts_money()
        new_data = copy.deepcopy(gom_accounts_info_data)
        loop_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report = []
        error_accounts_array = []
        lost_accounts_array = []
        low_blood_accounts_array = []
        # === T·∫°o set t√†i kho·∫£n hi·ªán t·∫°i
        current_accounts = set(acc[0] for acc in new_data)
        total_profit = 0
        # === Ki·ªÉm tra t·ª´ng t√†i kho·∫£n trong d·ªØ li·ªáu m·ªõi
        for acc in new_data:
            name = acc[0]
            money = float(acc[1])
            timestamp = acc[2]
            profit = 0  # Kh·ªüi t·∫°o l·ª£i nhu·∫≠n m·∫∑c ƒë·ªãnh
            
            if name in previous_data:
                old_money = previous_data[name]
                profit = money - old_money  # T√≠nh l·ª£i nhu·∫≠n
                total_profit += profit  # C·ªông d·ªìn l·ª£i nhu·∫≠n t·ªïng
                if money > old_money:
                    # Ki·ªÉm tra KPI theo lo·∫°i t√†i kho·∫£n
                    if name in gom_accounts_list:
                        # T√†i kho·∫£n gom ti·ªÅn
                        kpi_custom = gom_accounts_list[name]
                        if kpi_custom:
                            # C√≥ KPI ri√™ng
                            kpi_check = (float(kpi_custom)/24)/60  # Chuy·ªÉn t·ª´ Kv/day sang Kv/ph√∫t
                            account_type = f"GOM-{kpi_custom}"
                        else:
                            # D√πng KPI default
                            kpi_check = kpi_gom_1m
                            account_type = "GOM-default"
                    else:
                        # T√†i kho·∫£n th∆∞·ªùng
                        kpi_check = kpi_1m
                        account_type = "TH∆Ø·ªúNG"
                    
                    kpi_required = kpi_check * minutes
                    
                    if profit >= kpi_required:
                        status = "TƒÉng"
                        print(f"[{timestamp}] ‚úÖ {name} ({account_type}) tƒÉng ti·ªÅn: {old_money} ‚Üí {money} (+{profit:.2f})")
                    else:
                        status = "Ch∆∞a ƒë·∫°t KPI"
                        print(f"[{timestamp}] ‚ö†Ô∏è {name} ({account_type}) tƒÉng ti·ªÅn: {old_money} ‚Üí {money} (+{profit:.2f}) (Ch∆∞a ƒë·∫°t KPI: {kpi_required:.2f})")
                elif money < old_money:
                    status = "Gi·∫£m"
                    print(f"[{timestamp}] üîª {name} gi·∫£m ti·ªÅn: {old_money} ‚Üí {money}")
                else:
                    status = "Kh√¥ng ƒë·ªïi"
                    print(f"[{timestamp}] ‚è∏Ô∏è {name} kh√¥ng ƒë·ªïi: {money}")
                    error_accounts.add(name)
                    error_accounts_array.append({
                        "account": name,
                    })
            elif name in missing_accounts:
                status = "M·ªõi"
                print(f"[{timestamp}] üîÑ {name} quay l·∫°i sau khi b·ªã vƒÉng. Ti·ªÅn: {money}")
                missing_accounts.remove(name)
            else:
                status = "M·ªõi"
                print(f"[{timestamp}] üÜï {name} m·ªõi, ti·ªÅn: {money}")

            report.append({
                "account": name,
                "old": previous_data.get(name, 0),
                "new": money,
                "status": status,
                "profit": profit
            })

            # L∆∞u v√†o b·ªô nh·ªõ
            previous_data[name] = money
            known_accounts.add(name)

        # === Ki·ªÉm tra c√°c t√†i kho·∫£n b·ªã m·∫•t
        for known_name in known_accounts:
            if known_name not in current_accounts:
                print(f"[{loop_time_str}] ‚ùå {known_name} b·ªã vƒÉng game (kh√¥ng c√≤n trong danh s√°ch).")
                report.append({
                    "account": known_name,
                    "old": previous_data[known_name],
                    "new": 0,
                    "status": "VƒÉng game",
                    "profit": 0
                })
                missing_accounts.add(known_name)
                lost_accounts_array.append({
                    "account": known_name,
                })

        # === G·ª≠i email
        # send_email_report(report, loop_time_str, ten_may)

        # L∆∞u snapshot v√†o file
        save_snapshot(ten_may, report)
        # L∆∞u d·ªØ li·ªáu v√†o MongoDB
        save_money_data_to_mongo(ten_may, total_profit)
        # T√≥m t·∫Øt thu nh·∫≠p trong 24 gi·ªù qua
        summarize_last_24h_income(ten_may)
        # X√≥a c√°c snapshot c≈© h∆°n 2 ng√†y
        clean_old_snapshots(ten_may, days_to_keep=2)

        # === C·∫≠p nh·∫≠t tr·∫°ng th√°i is_logged_in trong accounts.json
        update_accounts_online_status(current_accounts)
        
        # === C·∫≠p nh·∫≠t th√¥ng tin m√°y ch·ªß l√™n MongoDB
        update_mongodb_server_status()
        
        # === G·ª≠i b√°o c√°o Discord
        if is_first_run:
            print("üîî L·∫ßn ch·∫°y ƒë·∫ßu ti√™n, kh√¥ng g·ª≠i b√°o c√°o Discord.")
            is_first_run = False
        else:
            send_discord_report(report, ten_may, loop_time_str)
            run_kill_hung_vo_lam()
            fixErrorAccounts(error_accounts_array)
            # X·ª≠ l√Ω c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi v√¨ th·∫•p m√°u
            low_blood_accounts_array = getLowBoodAccounts()
            # fixLowBloodAccounts()
            fix_account_stuck_on_map_Sa_Mac()
            relogin_lost_accounts()
        print(f"üìä B√°o c√°o ki·ªÉm tra t√†i kho·∫£n m√°y {ten_may} l√∫c {loop_time_str} ƒë√£ ho√†n th√†nh.")
        # === ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo
        for i in range(minutes * 15):
            if stop_flag:
                print("üõë ƒê√£ d·ª´ng ki·ªÉm tra.")
                return
            seconds_left = minutes * 60 - i
            print(f"C√≤n l·∫°i {format_time_to_minute_second(seconds_left)} tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            # print(f"{minutes * 60 - i} gi√¢y c√≤n l·∫°i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            time.sleep(1)
        # X·ª≠ l√Ω c√°c t√†i kho·∫£n l·ªói sau 15 phut
        run_kill_hung_vo_lam()
        fixLowBloodAccountsWithRepair(prev_errors=low_blood_accounts_array)
        low_blood_accounts_array = []
        # fixLowBloodAccounts()
        fix_account_stuck_on_map_Sa_Mac()

        # === ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo
        for i in range(minutes * 15):
            if stop_flag:
                print("üõë ƒê√£ d·ª´ng ki·ªÉm tra.")
                return
            seconds_left = minutes * 45 - i
            print(f"C√≤n l·∫°i {format_time_to_minute_second(seconds_left)} tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            # print(f"{minutes * 45 - i} gi√¢y c√≤n l·∫°i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            time.sleep(1)
        # X·ª≠ l√Ω c√°c t√†i kho·∫£n l·ªói sau 15 phut
        run_kill_hung_vo_lam()
        low_blood_accounts_array = getLowBoodAccounts()
        # fixLowBloodAccounts()
        fix_account_stuck_on_map_Sa_Mac()
        relogin_lost_accounts()

        # === ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo
        for i in range(minutes * 15):
            if stop_flag:
                print("üõë ƒê√£ d·ª´ng ki·ªÉm tra.")
                return
            seconds_left = minutes * 30 - i
            print(f"C√≤n l·∫°i {format_time_to_minute_second(seconds_left)} tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            # print(f"{minutes * 30 - i} gi√¢y c√≤n l·∫°i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            time.sleep(1)
        # X·ª≠ l√Ω c√°c t√†i kho·∫£n l·ªói sau 15 phut
        run_kill_hung_vo_lam()
        fixLowBloodAccountsWithRepair(prev_errors=low_blood_accounts_array)
        low_blood_accounts_array = []
        # fixLowBloodAccounts()
        fix_account_stuck_on_map_Sa_Mac()

        # === ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo
        for i in range(minutes * 15):
            if stop_flag:
                print("üõë ƒê√£ d·ª´ng ki·ªÉm tra.")
                return
            seconds_left = minutes * 15 - i
            print(f"C√≤n l·∫°i {format_time_to_minute_second(seconds_left)} tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            # print(f"{minutes * 15 - i} gi√¢y c√≤n l·∫°i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
            time.sleep(1)

# === H√ÄM ƒêI·ªÄU KHI·ªÇN LU·ªíNG ===
def start_checking(minutes, ten_may):
    global stop_flag
    stop_flag = False
    t = threading.Thread(target=auto_check_loop, args=(minutes,ten_may), daemon=True)
    t.start()
    print("üîÅ B·∫Øt ƒë·∫ßu ki·ªÉm tra...")

def stop_checking():
    global stop_flag
    stop_flag = True
    print("‚õî Y√™u c·∫ßu d·ª´ng ki·ªÉm tra.")

if __name__ == "__main__":
    check_accounts_money()

