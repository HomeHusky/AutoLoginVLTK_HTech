# ===============================
# üóÑÔ∏è MONGODB MANAGER MODULE
# ===============================
"""
Module qu·∫£n l√Ω k·∫øt n·ªëi v√† l∆∞u tr·ªØ d·ªØ li·ªáu l√™n MongoDB
T·ª± ƒë·ªông t·∫°o collection v√† qu·∫£n l√Ω th√¥ng tin m√°y ch·ªß
"""

import os
import json
from typing import Optional, Dict, Any
from datetime import datetime
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

import GlobalFunction as GF


class MongoDBManager:
    """
    Class qu·∫£n l√Ω MongoDB connection v√† operations
    """
    
    def __init__(self, uri: Optional[str] = None, db_name: str = "HtechVolam"):
        """
        Kh·ªüi t·∫°o MongoDB Manager
        
        Args:
            uri: MongoDB connection string URI
            db_name: T√™n database
        """
        self.uri = uri or "mongodb+srv://htechvolam:Htech317@htechvolam.oefc26z.mongodb.net/?retryWrites=true&w=majority&appName=HtechVolam"
        self.db_name = db_name
        self.client: Optional[MongoClient] = None
        self.db = None
    
    def connect(self) -> bool:
        """
        K·∫øt n·ªëi t·ªõi MongoDB
        
        Returns:
            bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        try:
            self.client = MongoClient(self.uri, server_api=ServerApi('1'))
            self.client.admin.command('ping')
            self.db = self.client[self.db_name]
            print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")
            return False
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi MongoDB"""
        if self.client:
            self.client.close()
            print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB")
    
    def ensure_collection_exists(self, collection_name: str) -> bool:
        """
        Ki·ªÉm tra v√† t·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
        
        Args:
            collection_name: T√™n collection
            
        Returns:
            bool: True n·∫øu collection ƒë√£ t·ªìn t·∫°i ho·∫∑c t·∫°o th√†nh c√¥ng
        """
        try:
            if collection_name not in self.db.list_collection_names():
                self.db.create_collection(collection_name)
                print(f"‚úÖ ƒê√£ t·∫°o collection '{collection_name}'")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o collection: {e}")
            return False
    
    def get_title_mail(self) -> str:
        """
        L·∫•y title mail t·ª´ file monitor_time.json
        
        Returns:
            str: Title mail ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
        """
        try:
            monitor_file = os.path.join(GF.join_directory_data(), 'monitor_time.json')
            
            if os.path.exists(monitor_file):
                with open(monitor_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('title_mail', 'AutoVLBS Server')
            else:
                return 'AutoVLBS Server'
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc title mail: {e}")
            return 'AutoVLBS Server'
    
    def count_online_offline_accounts(self) -> Dict[str, int]:
        """
        ƒê·∫øm s·ªë account online v√† offline t·ª´ accounts.json
        
        Returns:
            dict: {"online": int, "offline": int, "total": int}
        """
        try:
            accounts_file = os.path.join(GF.join_directory_data(), 'accounts.json')
            
            if not os.path.exists(accounts_file):
                return {"online": 0, "offline": 0, "total": 0}
            
            with open(accounts_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                accounts = data.get('accounts', [])
                
                online_count = sum(1 for acc in accounts if acc.get('is_logged_in', False))
                offline_count = len(accounts) - online_count
                
                return {
                    "online": online_count,
                    "offline": offline_count,
                    "total": len(accounts)
                }
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·∫øm account: {e}")
            return {"online": 0, "offline": 0, "total": 0}
    
    def update_server_status(self, collection_name: str = "server_status") -> bool:
        """
        C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi th√¥ng tin m√°y ch·ªß trong MongoDB
        
        Args:
            collection_name: T√™n collection (m·∫∑c ƒë·ªãnh: server_status)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            # ƒê·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi
            if not self.client:
                if not self.connect():
                    return False
            
            # ƒê·∫£m b·∫£o collection t·ªìn t·∫°i
            self.ensure_collection_exists(collection_name)
            
            # L·∫•y th√¥ng tin
            ten_may = self.get_title_mail()
            account_stats = self.count_online_offline_accounts()
            
            # T·∫°o document
            server_data = {
                "ten_may": ten_may,
                "so_acc_online": account_stats["online"],
                "so_acc_offline": account_stats["offline"],
                "tong_so_acc": account_stats["total"],
                "cap_nhat_luc": datetime.now(),
                "timestamp": datetime.now().isoformat()
            }
            
            # L·∫•y collection
            collection = self.db[collection_name]
            
            # Ki·ªÉm tra xem m√°y ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_server = collection.find_one({"ten_may": ten_may})
            
            if existing_server:
                # C·∫≠p nh·∫≠t th√¥ng tin
                collection.update_one(
                    {"ten_may": ten_may},
                    {"$set": server_data}
                )
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin m√°y '{ten_may}': {account_stats['online']} online, {account_stats['offline']} offline")
            else:
                # Th√™m m·ªõi
                server_data["ngay_tao"] = datetime.now()
                collection.insert_one(server_data)
                print(f"‚úÖ ƒê√£ th√™m m·ªõi m√°y '{ten_may}': {account_stats['online']} online, {account_stats['offline']} offline")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t server status: {e}")
            return False
    
    def get_server_status(self, ten_may: Optional[str] = None, collection_name: str = "server_status") -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin m√°y ch·ªß t·ª´ MongoDB
        
        Args:
            ten_may: T√™n m√°y (None = l·∫•y m√°y hi·ªán t·∫°i)
            collection_name: T√™n collection
            
        Returns:
            dict: Th√¥ng tin m√°y ch·ªß ho·∫∑c None
        """
        try:
            if not self.client:
                if not self.connect():
                    return None
            
            if ten_may is None:
                ten_may = self.get_title_mail()
            
            collection = self.db[collection_name]
            server_info = collection.find_one({"ten_may": ten_may})
            
            return server_info
            
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y server status: {e}")
            return None
    
    def get_all_servers(self, collection_name: str = "server_status") -> list:
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ m√°y ch·ªß
        
        Args:
            collection_name: T√™n collection
            
        Returns:
            list: Danh s√°ch c√°c m√°y ch·ªß
        """
        try:
            if not self.client:
                if not self.connect():
                    return []
            
            collection = self.db[collection_name]
            servers = list(collection.find())
            
            return servers
            
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y danh s√°ch servers: {e}")
            return []


# Singleton instance
mongodb_manager = MongoDBManager()


# ==================== HELPER FUNCTIONS ====================

def update_server_status_to_mongo() -> bool:
    """
    Helper function ƒë·ªÉ c·∫≠p nh·∫≠t server status l√™n MongoDB
    
    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        result = mongodb_manager.update_server_status()
        mongodb_manager.close()
        return result
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False


def get_current_server_status() -> Optional[Dict[str, Any]]:
    """
    Helper function ƒë·ªÉ l·∫•y th√¥ng tin m√°y ch·ªß hi·ªán t·∫°i
    
    Returns:
        dict: Th√¥ng tin m√°y ch·ªß ho·∫∑c None
    """
    try:
        result = mongodb_manager.get_server_status()
        mongodb_manager.close()
        return result
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None


if __name__ == "__main__":
    # Test module
    print("=== TEST MONGODB MANAGER ===")
    
    # Test k·∫øt n·ªëi
    if mongodb_manager.connect():
        # Test c·∫≠p nh·∫≠t server status
        mongodb_manager.update_server_status()
        
        # Test l·∫•y th√¥ng tin
        server_info = mongodb_manager.get_server_status()
        if server_info:
            print(f"\nüìä Th√¥ng tin m√°y ch·ªß:")
            print(f"   T√™n m√°y: {server_info.get('ten_may')}")
            print(f"   Online: {server_info.get('so_acc_online')}")
            print(f"   Offline: {server_info.get('so_acc_offline')}")
            print(f"   T·ªïng: {server_info.get('tong_so_acc')}")
        
        # ƒê√≥ng k·∫øt n·ªëi
        mongodb_manager.close()
