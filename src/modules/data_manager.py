# ===============================
# üìÅ DATA MANAGER MODULE
# ===============================
"""
Module qu·∫£n l√Ω t·∫•t c·∫£ c√°c thao t√°c ƒë·ªçc/ghi d·ªØ li·ªáu JSON
T√°ch bi·ªát logic data kh·ªèi UI, d·ªÖ test v√† t√°i s·ª≠ d·ª•ng
"""

import json
import os
from typing import Dict, List, Any, Optional
import GlobalFunction as GF
from modules.config import (
    ACCOUNTS_FILE, GLOBAL_TIME_FILE, SERVERS_FILE,
    DEFAULT_AUTO_NAMES, DEFAULT_AUTO_TOOL_PATH, DEFAULT_SLEEP_TIME
)


class DataManager:
    """
    Class qu·∫£n l√Ω vi·ªác ƒë·ªçc/ghi d·ªØ li·ªáu JSON
    Singleton pattern ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ 1 instance
    """
    
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(DataManager, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        if self._initialized:
            return
        
        self.accounts_file_path = ACCOUNTS_FILE
        self.global_time_file = GLOBAL_TIME_FILE
        self.servers_path = SERVERS_FILE
        self._cache = {}
        self._initialized = True
    
    # ==================== ACCOUNTS DATA ====================
    
    def load_accounts(self) -> Dict[str, Any]:
        """
        T·∫£i d·ªØ li·ªáu t√†i kho·∫£n t·ª´ file JSON
        
        Returns:
            Dict ch·ª©a th√¥ng tin accounts
        """
        try:
            return GF.read_json_file(self.accounts_file_path)
        except FileNotFoundError:
            return self._get_default_accounts_data()
    
    def load_data(self) -> Dict[str, Any]:
        """
        Alias cho load_accounts() ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        
        Returns:
            Dict ch·ª©a th√¥ng tin accounts
        """
        return self.load_accounts()
    
    def save_accounts(self, data: Dict[str, Any]) -> bool:
        """
        L∆∞u d·ªØ li·ªáu t√†i kho·∫£n v√†o file JSON
        
        Args:
            data: Dictionary ch·ª©a d·ªØ li·ªáu accounts
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng
        """
        try:
            file_path = os.path.join(GF.join_directory_data(), self.accounts_file_path)
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            return True
        except Exception as e:
            print(f"Error saving accounts: {e}")
            return False
    
    def save_data(self, data: Dict[str, Any]) -> bool:
        """
        Alias cho save_accounts() ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        
        Args:
            data: Dictionary ch·ª©a d·ªØ li·ªáu accounts
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng
        """
        return self.save_accounts(data)
    
    def get_account_by_username(self, username: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin account theo username
        
        Args:
            username: T√™n t√†i kho·∫£n
        
        Returns:
            Dict ch·ª©a th√¥ng tin account ho·∫∑c None
        """
        data = self.load_accounts()
        for account in data.get('accounts', []):
            if account.get('username') == username:
                return account
        return None
    
    def add_account(self, account_data: Dict[str, Any]) -> bool:
        """
        Th√™m t√†i kho·∫£n m·ªõi
        
        Args:
            account_data: Dictionary ch·ª©a th√¥ng tin account
        
        Returns:
            bool: True n·∫øu th√™m th√†nh c√¥ng
        """
        data = self.load_accounts()
        
        # Check if account exists
        if self.account_exists(account_data.get('username'), account_data.get('game_path')):
            return False
        
        data['accounts'].append(account_data)
        return self.save_accounts(data)
    
    def update_account(self, username: str, account_data: Dict[str, Any]) -> bool:
        """
        C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
        
        Args:
            username: T√™n t√†i kho·∫£n c·∫ßn update
            account_data: Dictionary ch·ª©a th√¥ng tin m·ªõi
        
        Returns:
            bool: True n·∫øu update th√†nh c√¥ng
        """
        data = self.load_accounts()
        
        for i, account in enumerate(data['accounts']):
            if account.get('username') == username:
                data['accounts'][i] = account_data
                return self.save_accounts(data)
        
        return False
    
    def delete_account(self, username: str) -> bool:
        """
        X√≥a t√†i kho·∫£n
        
        Args:
            username: T√™n t√†i kho·∫£n c·∫ßn x√≥a
        
        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng
        """
        data = self.load_accounts()
        
        for i, account in enumerate(data['accounts']):
            if account.get('username') == username:
                del data['accounts'][i]
                return self.save_accounts(data)
        
        return False
    
    def account_exists(self, username: str, game_path: str) -> bool:
        """
        Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
        
        Args:
            username: T√™n t√†i kho·∫£n
            game_path: ƒê∆∞·ªùng d·∫´n game
        
        Returns:
            bool: True n·∫øu t·ªìn t·∫°i
        """
        data = self.load_accounts()
        for account in data.get('accounts', []):
            if (account.get('username') == username and 
                account.get('game_path') == game_path):
                return True
        return False
    
    def get_all_accounts(self) -> List[Dict[str, Any]]:
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ t√†i kho·∫£n
        
        Returns:
            List c√°c account dictionaries
        """
        data = self.load_accounts()
        return data.get('accounts', [])
    
    def update_account_login_status(self, username: str, is_logged_in: bool) -> bool:
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa t√†i kho·∫£n
        
        Args:
            username: T√™n t√†i kho·∫£n
            is_logged_in: Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        
        Returns:
            bool: True n·∫øu update th√†nh c√¥ng
        """
        data = self.load_accounts()
        
        for account in data['accounts']:
            if account.get('username') == username:
                account['is_logged_in'] = is_logged_in
                return self.save_accounts(data)
        
        return False
    
    def all_accounts_logged_in(self) -> bool:
        """
        Ki·ªÉm tra t·∫•t c·∫£ account ƒë√£ login ch∆∞a (ch·ªâ ki·ªÉm tra nh·ªØng account c√≥ is_select = false)
        
        Returns:
            bool: True n·∫øu t·∫•t c·∫£ ƒë√£ login
        """
        accounts = self.get_all_accounts()
        if not accounts:
            return False
        
        # Ch·ªâ ki·ªÉm tra nh·ªØng accounts c√≥ is_select = false (kh√¥ng b·ªã b·ªè qua)
        selected_accounts = [account for account in accounts if not account.get('is_select', False)]
        
        for account in selected_accounts:
            if not account.get('is_logged_in', False):
                return False
        
        return True
    
    # ==================== GLOBAL TIME DATA ====================
    
    def load_global_time(self) -> Dict[str, Any]:
        """
        T·∫£i d·ªØ li·ªáu th·ªùi gian global
        
        Returns:
            Dict ch·ª©a th√¥ng tin sleep time
        """
        try:
            return GF.read_config_file(self.global_time_file)
        except FileNotFoundError:
            return {"sleepTime": [DEFAULT_SLEEP_TIME]}
    
    def save_global_time(self, data: Dict[str, Any]) -> bool:
        """
        L∆∞u d·ªØ li·ªáu th·ªùi gian global
        
        Args:
            data: Dictionary ch·ª©a sleep time data
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng
        """
        try:
            file_path = os.path.join(GF.join_directory_config(), self.global_time_file)
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            return True
        except Exception as e:
            print(f"Error saving global time: {e}")
            return False
    
    def save_global_time_data(self, data: Dict[str, Any]) -> bool:
        """
        Alias cho save_global_time() ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        
        Args:
            data: Dictionary ch·ª©a sleep time data
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng
        """
        return self.save_global_time(data)
    
    def get_sleep_time(self) -> Dict[str, Any]:
        """
        L·∫•y th√¥ng tin sleep time
        
        Returns:
            Dict ch·ª©a sleep time settings
        """
        data = self.load_global_time()
        sleep_times = data.get('sleepTime', [])
        return sleep_times[0] if sleep_times else DEFAULT_SLEEP_TIME
    
    # ==================== SERVERS DATA ====================
    
    def load_servers(self) -> Dict[str, Any]:
        """
        T·∫£i d·ªØ li·ªáu servers
        
        Returns:
            Dict ch·ª©a th√¥ng tin servers
        """
        try:
            return GF.read_config_file(self.servers_path)
        except FileNotFoundError:
            return {"servers": {}, "folder_game": ""}
    
    def save_servers(self, data: Dict[str, Any]) -> bool:
        """
        L∆∞u d·ªØ li·ªáu servers
        
        Args:
            data: Dictionary ch·ª©a servers data
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng
        """
        try:
            file_path = os.path.join(GF.join_directory_config(), self.servers_path)
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)
            return True
        except Exception as e:
            print(f"Error saving servers: {e}")
            return False
    
    def get_servers_list(self) -> Dict[str, str]:
        """
        L·∫•y danh s√°ch servers
        
        Returns:
            Dict mapping server name -> path
        """
        data = self.load_servers()
        return data.get('servers', {})
    
    def update_server_path(self, server_name: str, path: str) -> bool:
        """
        C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n server
        
        Args:
            server_name: T√™n server
            path: ƒê∆∞·ªùng d·∫´n m·ªõi
        
        Returns:
            bool: True n·∫øu update th√†nh c√¥ng
        """
        data = self.load_servers()
        data['servers'][server_name] = path
        return self.save_servers(data)
    
    # ==================== HELPER METHODS ====================
    
    def _get_default_accounts_data(self) -> Dict[str, Any]:
        """
        L·∫•y d·ªØ li·ªáu accounts m·∫∑c ƒë·ªãnh
        
        Returns:
            Dict ch·ª©a c·∫•u tr√∫c m·∫∑c ƒë·ªãnh
        """
        return {
            "accounts": [],
            "autoNames": DEFAULT_AUTO_NAMES,
            "auto_tool_path": DEFAULT_AUTO_TOOL_PATH
        }
    
    def clear_cache(self):
        """X√≥a cache d·ªØ li·ªáu"""
        self._cache.clear()
    
    def read_json_file(self, filename: str, use_data_dir: bool = True) -> Dict[str, Any]:
        """
        ƒê·ªçc file JSON t·ªïng qu√°t
        
        Args:
            filename: T√™n file
            use_data_dir: True n·∫øu file trong th∆∞ m·ª•c data
        
        Returns:
            Dict ch·ª©a d·ªØ li·ªáu JSON
        """
        try:
            if use_data_dir:
                return GF.read_json_file(filename)
            else:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"Error reading {filename}: {e}")
            return {}
    
    def write_json_file(self, filename: str, data: Dict[str, Any], 
                       use_data_dir: bool = True) -> bool:
        """
        Ghi file JSON t·ªïng qu√°t
        
        Args:
            filename: T√™n file
            data: D·ªØ li·ªáu c·∫ßn ghi
            use_data_dir: True n·∫øu file trong th∆∞ m·ª•c data
        
        Returns:
            bool: True n·∫øu ghi th√†nh c√¥ng
        """
        try:
            if use_data_dir:
                file_path = os.path.join(GF.join_directory_data(), filename)
            else:
                file_path = filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, file, ensure_ascii=False, indent=4)
            return True
        except Exception as e:
            print(f"Error writing {filename}: {e}")
            return False


# Singleton instance
data_manager = DataManager()
