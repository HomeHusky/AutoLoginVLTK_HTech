# ===============================
# TAB DASHBOARD/MONITOR
# ===============================
"""
Tab Dashboard - Hi·ªÉn th·ªã tr·∫°ng th√°i t√†i kho·∫£n v√† ƒëi·ªÅu khi·ªÉn login
Ch·ªâ t·∫≠p trung v√†o monitoring v√† control, kh√¥ng c√≥ CRUD
"""

import tkinter as tk
from tkinter import messagebox, ttk
import realTimeCheckBugAutoVLBS as REAL_TIME_CHECK


class DashboardTab:
    def __init__(self, parent, data_manager, callbacks):
        """
        Kh·ªüi t·∫°o tab Dashboard
        
        Args:
            parent: Widget cha (notebook)
            data_manager: Object qu·∫£n l√Ω d·ªØ li·ªáu
            callbacks: Dictionary ch·ª©a c√°c callback functions
        """
        self.parent = parent
        self.data_manager = data_manager
        self.callbacks = callbacks
        
        # Bi·∫øn checkbox
        self.varCheckBox = tk.IntVar()
        
        # L∆∞u reference ƒë·∫øn root window ƒë·ªÉ resize
        self.root = parent.winfo_toplevel()
        
        # T·∫°o giao di·ªán
        self.create_ui()
    
    def create_ui(self):
        """T·∫°o giao di·ªán Dashboard"""
        # Frame th·ªëng k√™ v·ªõi card design - ƒê·∫∂T TR√äN C√ôNG
        self.create_stats_cards()
        
        # Frame ƒëi·ªÅu khi·ªÉn ch√≠nh
        control_frame = ttk.LabelFrame(self.parent, text="üéÆ ƒêi·ªÅu khi·ªÉn", padding=(15, 10))
        control_frame.pack(padx=10, pady=10, fill="x")
        
        # Row 1: Checkbox Auto click AutoVLBS + Time input + Theo d√µi
        row1_frame = ttk.Frame(control_frame)
        row1_frame.pack(fill="x", pady=5)
        
        checkbox = tk.Checkbutton(row1_frame, text="T·ª± ƒë·ªông click AutoVLBS", 
                                 variable=self.varCheckBox,
                                 font=('Segoe UI', 10))
        checkbox.pack(side="left", padx=5)
        
        ttk.Label(row1_frame, text="Th·ªùi gian (ph√∫t):").pack(side="left", padx=5)
        self.entry_time_check_loop_VLBS = ttk.Entry(row1_frame, width=8)
        self.entry_time_check_loop_VLBS.pack(side="left", padx=5)
        
        self.start_check_fix_VLBS_button = ttk.Button(row1_frame, text="Theo d√µi", 
                                                      command=self.on_start_check_fix_VLBS_button_click)
        self.start_check_fix_VLBS_button.pack(side="left", padx=5)
        
        # Row 2: C√°c n√∫t ƒëi·ªÅu khi·ªÉn ch√≠nh
        row2_frame = ttk.Frame(control_frame)
        row2_frame.pack(fill="x", pady=5)
        
        self.start_login_button = ttk.Button(row2_frame, text="‚ñ∂ B·∫Øt ƒë·∫ßu", 
                                            style="Success.TButton",
                                            command=lambda: self.callbacks.get('start_login')(self.varCheckBox.get()))
        self.start_login_button.pack(side="left", padx=5)
        
        self.stop_login_button = ttk.Button(row2_frame, text="‚è∏ D·ª´ng", 
                                           style="Danger.TButton",
                                           command=self.callbacks.get('stop_login'))
        self.stop_login_button.pack(side="left", padx=5)
        
        self.test_button = ttk.Button(row2_frame, text="üß™ Test", 
                                      style="Warning.TButton",
                                      command=self.callbacks.get('test_accounts'))
        self.test_button.pack(side="left", padx=5)
        
        self.run_auto_update_button = ttk.Button(row2_frame, text="üîÑ AutoUpdate", 
                                                 command=self.callbacks.get('run_all_auto_update'))
        self.run_auto_update_button.pack(side="left", padx=5)
        
        # N√∫t toggle b·∫£ng tr·∫°ng th√°i
        self.toggle_button = ttk.Button(row2_frame, text="‚ñº M·ªü r·ªông", 
                                       command=self.toggle_account_table)
        self.toggle_button.pack(side="left", padx=5)
        
        # Treeview hi·ªÉn th·ªã tr·∫°ng th√°i t√†i kho·∫£n (·∫©n m·∫∑c ƒë·ªãnh)
        self.tree_frame = ttk.LabelFrame(self.parent, text="üìä Tr·∫°ng th√°i T√†i kho·∫£n", padding=(15, 10))
        # Kh√¥ng pack ngay, s·∫Ω pack khi nh·∫•n n√∫t
        self.is_table_visible = False
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt c·∫ßn thi·∫øt
        columns = ("stt", "is_select", "ingame", "is_logged_in")
        self.tree_accounts = ttk.Treeview(self.tree_frame, columns=columns, show="headings", height=5)
        
        # Thi·∫øt l·∫≠p heading
        self.tree_accounts.heading("stt", text="STT")
        self.tree_accounts.heading("is_select", text="B·ªè qua")
        self.tree_accounts.heading("ingame", text="T√™n nh√¢n v·∫≠t")
        self.tree_accounts.heading("is_logged_in", text="Tr·∫°ng th√°i")
        
        # Thi·∫øt l·∫≠p column width
        self.tree_accounts.column("stt", width=60, anchor="center")
        self.tree_accounts.column("is_select", width=80, anchor="center")
        self.tree_accounts.column("ingame", width=200)
        self.tree_accounts.column("is_logged_in", width=120, anchor="center")
        
        # T·∫°o thanh cu·ªôn
        v_scrollbar = ttk.Scrollbar(self.tree_frame, orient="vertical", command=self.tree_accounts.yview)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree_accounts.configure(yscrollcommand=v_scrollbar.set)
        
        self.tree_accounts.pack(fill="both", expand=True)
        
        # Bind events
        self.tree_accounts.bind("<Double-1>", self.on_item_select)
        self.tree_accounts.bind("<Button-1>", self.on_heading_click)
    
    def create_stats_cards(self):
        """T·∫°o cards th·ªëng k√™"""
        # Frame th·ªëng k√™ v·ªõi card design
        stats_container = ttk.LabelFrame(self.parent, text="üìà Th·ªëng k√™", padding=(15, 10))
        stats_container.pack(padx=10, pady=10, fill="x")
        
        # Card container
        cards_frame = ttk.Frame(stats_container)
        cards_frame.pack(fill="x")
        
        # Card 1: T·ªïng
        card1 = ttk.Frame(cards_frame, relief="solid", borderwidth=1)
        card1.pack(side="left", padx=5, pady=5, fill="both", expand=True)
        
        ttk.Label(card1, text="üìä T·ªîNG", 
                 font=('Segoe UI', 9),
                 foreground="#64748b").pack(pady=(5, 0))
        self.label_total = ttk.Label(card1, text="0", 
                                     font=('Segoe UI', 20, 'bold'),
                                     foreground="#1e293b")
        self.label_total.pack(pady=(0, 5))
        
        # Card 2: Online
        card2 = ttk.Frame(cards_frame, relief="solid", borderwidth=1)
        card2.pack(side="left", padx=5, pady=5, fill="both", expand=True)
        
        ttk.Label(card2, text="üü¢ ONLINE", 
                 font=('Segoe UI', 9),
                 foreground="#10b981").pack(pady=(5, 0))
        self.label_online = ttk.Label(card2, text="0", 
                                     font=('Segoe UI', 20, 'bold'),
                                     foreground="#10b981")
        self.label_online.pack(pady=(0, 5))
        
        # Card 3: Offline
        card3 = ttk.Frame(cards_frame, relief="solid", borderwidth=1)
        card3.pack(side="left", padx=5, pady=5, fill="both", expand=True)
        
        ttk.Label(card3, text="‚ö´ OFFLINE", 
                 font=('Segoe UI', 9),
                 foreground="#ef4444").pack(pady=(5, 0))
        self.label_offline = ttk.Label(card3, text="0", 
                                      font=('Segoe UI', 20, 'bold'),
                                      foreground="#ef4444")
        self.label_offline.pack(pady=(0, 5))
        
        # Card 4: T·ª∑ l·ªá
        card4 = ttk.Frame(cards_frame, relief="solid", borderwidth=1)
        card4.pack(side="left", padx=5, pady=5, fill="both", expand=True)
        
        ttk.Label(card4, text="üìä T·ª∂ L·ªÜ", 
                 font=('Segoe UI', 9),
                 foreground="#3b82f6").pack(pady=(5, 0))
        self.label_ratio = ttk.Label(card4, text="0%", 
                                     font=('Segoe UI', 20, 'bold'),
                                     foreground="#3b82f6")
        self.label_ratio.pack(pady=(0, 5))
    
    def toggle_account_table(self):
        """Toggle hi·ªÉn th·ªã/·∫©n b·∫£ng tr·∫°ng th√°i t√†i kho·∫£n + Auto resize window"""
        if self.is_table_visible:
            # ·∫®n b·∫£ng - Thu nh·ªè window
            self.tree_frame.pack_forget()
            self.toggle_button.config(text="‚ñº M·ªü r·ªông")
            self.is_table_visible = False
            # Auto resize - V·ª´a kh√≠t v·ªõi n·ªôi dung
            self.root.update_idletasks()
            width = max(650, self.parent.winfo_reqwidth() + 20)
            height = max(450, self.parent.winfo_reqheight() + 80)
            self.root.geometry(f"{width}x{height}+0+0")
            print(f"üîΩ ƒê√£ thu g·ªçn b·∫£ng tr·∫°ng th√°i - {width}x{height}")
        else:
            # Hi·ªán b·∫£ng - To window ra
            self.tree_frame.pack(padx=10, pady=10, fill="both", expand=True)
            self.toggle_button.config(text="‚ñ≤ Thu g·ªçn")
            self.is_table_visible = True
            # Auto resize - V·ª´a kh√≠t v·ªõi n·ªôi dung
            self.root.update_idletasks()
            width = max(650, self.parent.winfo_reqwidth() + 20)
            height = max(750, self.parent.winfo_reqheight() + 80)
            self.root.geometry(f"{width}x{height}+0+0")
            print(f"üîº ƒê√£ m·ªü r·ªông b·∫£ng tr·∫°ng th√°i - {width}x{height}")
    
    # ==================== DATA METHODS ====================
    
    def load_to_gui(self):
        """Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ file JSON l√™n giao di·ªán"""
        data = self.data_manager.load_data()
        
        # X√≥a d·ªØ li·ªáu hi·ªán t·∫°i trong Treeview
        for i in self.tree_accounts.get_children():
            self.tree_accounts.delete(i)
        
        # ƒê·∫øm s·ªë l∆∞·ª£ng
        total = len(data['accounts'])
        online = 0
        offline = 0
        
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n
        stt = 1
        for account in data['accounts']:
            is_logged_in = account.get('is_logged_in', False)
            is_logged_in_display = "üü¢ Online" if is_logged_in else "‚ö´ Offline"
            is_select_display = "‚úì" if account.get('is_select', False) else ""
            
            # ƒê·∫øm online/offline
            if is_logged_in:
                online += 1
            else:
                offline += 1
            
            # Th√™m m√†u cho row
            tags = ('online',) if is_logged_in else ('offline',)
            
            self.tree_accounts.insert("", "end", values=(
                stt,
                is_select_display,
                account['ingame'] if account['ingame'] else account['username'],
                is_logged_in_display
            ), tags=tags)
            stt += 1
        
        # C·∫•u h√¨nh m√†u cho tags
        self.tree_accounts.tag_configure('online', foreground='#10b981')
        self.tree_accounts.tag_configure('offline', foreground='#64748b')
        
        # T√≠nh t·ª∑ l·ªá online
        ratio = (online / total * 100) if total > 0 else 0
        
        # C·∫≠p nh·∫≠t th·ªëng k√™ v·ªõi s·ªë l·ªõn
        self.label_total.config(text=f"{total}")
        self.label_online.config(text=f"{online}")
        self.label_offline.config(text=f"{offline}")
        self.label_ratio.config(text=f"{ratio:.1f}%")
    
    def update_status_to_logged_in(self, username):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ login"""
        # Reload l·∫°i to√†n b·ªô ƒë·ªÉ c·∫≠p nh·∫≠t
        self.load_to_gui()
    
    # ==================== EVENT HANDLERS ====================
    
    def on_item_select(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán double click v√†o item - Toggle b·ªè qua"""
        selected_item = self.tree_accounts.selection()
        if not selected_item:
            return
        
        selected_item = selected_item[0]
        values = self.tree_accounts.item(selected_item, 'values')
        stt = int(values[0]) - 1
        
        # Load data v√† toggle is_select
        data = self.data_manager.load_data()
        account = data['accounts'][stt]
        account['is_select'] = not account['is_select']
        
        # Save data
        self.data_manager.save_data(data)
        
        # Reload GUI
        self.load_to_gui()
    
    def on_heading_click(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán click v√†o heading - Toggle t·∫•t c·∫£"""
        try:
            region = self.tree_accounts.identify_region(event.x, event.y)
            column = self.tree_accounts.identify_column(event.x)
            
            if region == "heading" and column == "#2":  # C·ªôt "B·ªè qua"
                data = self.data_manager.load_data()
                
                # Toggle t·∫•t c·∫£
                current_state = data['accounts'][0].get('is_select', False) if data['accounts'] else False
                new_state = not current_state
                
                for account in data['accounts']:
                    account['is_select'] = new_state
                
                # Save v√† reload
                self.data_manager.save_data(data)
                self.load_to_gui()
        except Exception as e:
            print(f"L·ªói click heading: {e}")
    
    def on_start_check_fix_VLBS_button_click(self):
        """X·ª≠ l√Ω s·ª± ki·ªán click n√∫t theo d√µi"""
        is_checking = self.callbacks.get('is_checking_fix_vlbs')
        
        if not is_checking():
            print("B·∫Øt ƒë·∫ßu ki·ªÉm tra fix l·ªói VLBS")
            entry_title_mail = self.callbacks.get('get_entry_title_mail')()
            time_check = int(self.entry_time_check_loop_VLBS.get().strip()) if self.entry_time_check_loop_VLBS.get().strip().isdigit() else 60
            REAL_TIME_CHECK.start_checking(time_check, entry_title_mail)
            self.start_check_fix_VLBS_button.config(text="D·ª´ng ki·ªÉm tra")
            self.callbacks.get('set_checking_fix_vlbs')(True)
        else:
            print("D·ª´ng ki·ªÉm tra fix l·ªói VLBS")
            REAL_TIME_CHECK.stop_checking()
            self.start_check_fix_VLBS_button.config(text="Theo d√µi")
            self.callbacks.get('set_checking_fix_vlbs')(False)
    
    def get_pass_accounts(self):
        """L·∫•y danh s√°ch pass accounts"""
        data = self.data_manager.load_data()
        pass_accounts = []
        for account in data['accounts']:
            if account.get('is_select', False):
                pass_accounts.append(account['username'])
        return pass_accounts
    
    def clear_pass_accounts(self):
        """X√≥a danh s√°ch pass accounts - Kh√¥ng c·∫ßn thi·∫øt v√¨ load t·ª´ data"""
        pass
