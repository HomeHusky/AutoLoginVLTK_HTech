# ===============================
# TAB QU·∫¢N L√ù ƒê∆Ø·ªúNG D·∫™N
# ===============================

import tkinter as tk
from tkinter import messagebox, ttk, filedialog
import json
import os
import GlobalFunction as GF
import winshell
from win32com.client import Dispatch

class PathManagerTab:
    def __init__(self, parent, data_manager):
        """
        Kh·ªüi t·∫°o tab Qu·∫£n l√Ω ƒê∆∞·ªùng d·∫´n
        
        Args:
            parent: Widget cha (notebook)
            data_manager: Object qu·∫£n l√Ω d·ªØ li·ªáu
        """
        self.parent = parent
        self.data_manager = data_manager
        
        # Bi·∫øn checkbox
        self.varHideEffects = tk.IntVar()
        self.varStartUp = tk.IntVar()
        
        # T·∫°o giao di·ªán
        self.create_ui()
    
    def create_ui(self):
        """T·∫°o giao di·ªán cho tab v·ªõi scrollbar"""
        # T·∫°o canvas v√† scrollbar
        canvas = tk.Canvas(self.parent, highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack canvas v√† scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # S·ª≠ d·ª•ng scrollable_frame thay v√¨ self.parent
        container = scrollable_frame
        
        # Frame th√¥ng tin m√°y
        machine_frame = ttk.LabelFrame(container, text="‚öôÔ∏è Th√¥ng tin M√°y", padding=(15, 10))
        machine_frame.pack(padx=10, pady=10, fill="x")
        
        # T√™n m√°y (title_mail)
        ttk.Label(machine_frame, text="T√™n m√°y (Discord):").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.entry_title_mail = ttk.Entry(machine_frame, width=40)
        self.entry_title_mail.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        ttk.Label(machine_frame, text="V√≠ d·ª•: M√°y ch·ªß 1, PC Gaming, AutoVLBS Server", 
                 foreground="#6b7280", font=('Segoe UI', 8)).grid(row=1, column=1, padx=5, pady=(0, 5), sticky="w")
        
        # N√∫t l∆∞u t√™n m√°y
        save_machine_button = ttk.Button(machine_frame, text="üíæ L∆∞u t√™n m√°y", 
                                        command=self.save_title_mail)
        save_machine_button.grid(row=0, column=2, padx=5, pady=5)
        
        machine_frame.columnconfigure(1, weight=1)
        
        # Frame th√¥ng tin ƒë∆∞·ªùng d·∫´n
        auto_frame = ttk.LabelFrame(container, text="üîß C√†i ƒë·∫∑t T·ª± ƒë·ªông", padding=(10, 5))
        auto_frame.pack(padx=5, pady=10, fill="x")
        
        self.auto_frame = auto_frame
        
        # Nh·∫≠p ƒë∆∞·ªùng d·∫´n tool auto
        ttk.Label(auto_frame, text="ƒê∆∞·ªùng d·∫´n Tool auto:").grid(row=0, column=0, padx=5, pady=5)
        self.entry_auto_path = ttk.Entry(auto_frame)
        self.entry_auto_path.grid(row=0, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # N√∫t ch·ªçn ƒë∆∞·ªùng d·∫´n auto
        browse_auto_button = ttk.Button(auto_frame, text="Browse", command=self.browse_auto_path)
        browse_auto_button.grid(row=0, column=5, padx=5, pady=5)
        
        # T√™n auto
        ttk.Label(auto_frame, text="T√™n auto:").grid(row=1, column=0, padx=5, pady=5)
        
        # Th·ªùi gian load game
        ttk.Label(auto_frame, text="Th·ªùi gian load game (s):").grid(row=4, column=0, padx=5, pady=5)
        self.entry_wait_game_open = ttk.Entry(auto_frame)
        self.entry_wait_game_open.grid(row=4, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Th·ªùi gian load game n·∫øu game m·ªü l√¢u
        ttk.Label(auto_frame, text="Th·ªùi gian load game n·∫øu game m·ªü l√¢u (s):").grid(row=5, column=0, padx=5, pady=5)
        self.entry_wait_game_open2 = ttk.Entry(auto_frame)
        self.entry_wait_game_open2.grid(row=5, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Th·ªùi gian load nh√¢n v·∫≠t
        ttk.Label(auto_frame, text="Th·ªùi gian load nh√¢n v·∫≠t (s):").grid(row=6, column=0, padx=5, pady=5)
        self.entry_wait_character_open = ttk.Entry(auto_frame)
        self.entry_wait_character_open.grid(row=6, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Th·ªùi gian load server
        ttk.Label(auto_frame, text="Th·ªùi gian load server (s):").grid(row=7, column=0, padx=5, pady=5)
        self.entry_wait_server_open = ttk.Entry(auto_frame)
        self.entry_wait_server_open.grid(row=7, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Th·ªùi gian load TrainJX
        ttk.Label(auto_frame, text="Th·ªùi gian load TrainJX (s):").grid(row=8, column=0, padx=5, pady=5)
        self.entry_wait_time_trainjx_open = ttk.Entry(auto_frame)
        self.entry_wait_time_trainjx_open.grid(row=8, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Th·ªùi gian load AutoVLBS
        ttk.Label(auto_frame, text="Th·ªùi gian load AutoVLBS (s):").grid(row=9, column=0, padx=5, pady=5)
        self.entry_wait_time_autovlbs_open = ttk.Entry(auto_frame)
        self.entry_wait_time_autovlbs_open.grid(row=9, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # S·ªë l·∫ßn th·ª≠ l·∫°i
        ttk.Label(auto_frame, text="S·ªë l·∫ßn th·ª≠ l·∫°i:").grid(row=10, column=0, padx=5, pady=5)
        self.entry_try_number = ttk.Entry(auto_frame)
        self.entry_try_number.grid(row=10, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Ch·ªù c·ª•c b·ªô
        ttk.Label(auto_frame, text="Ch·ªù c·ª•c b·ªô (0.5 ho·∫∑c 1 n·∫øu m√°y nhanh):").grid(row=11, column=0, padx=5, pady=5)
        self.entry_global_time_sleep = ttk.Entry(auto_frame)
        self.entry_global_time_sleep.grid(row=11, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # ·∫®n hi·ªáu ·ª©ng
        ttk.Label(auto_frame, text="·∫®n hi·ªáu ·ª©ng:").grid(row=12, column=0, padx=5, pady=5)
        self.varHideEffects.set(0)
        entry_hide_effects = ttk.Checkbutton(auto_frame, variable=self.varHideEffects)
        entry_hide_effects.grid(row=12, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # Kh·ªüi ƒë·ªông c√πng Window
        ttk.Label(auto_frame, text="Kh·ªüi ƒë·ªông c√πng Window:").grid(row=13, column=0, padx=5, pady=5)
        self.varStartUp.set(0)
        entry_start_up = ttk.Checkbutton(auto_frame, variable=self.varStartUp)
        entry_start_up.grid(row=13, column=1, columnspan=1, padx=5, pady=5, sticky="ew")
        
        # L∆∞u d·ªØ li·ªáu ƒë∆∞·ªùng d·∫´n auto
        save_button = ttk.Button(auto_frame, text="L∆∞u C√†i ƒë·∫∑t", command=self.save_auto_data)
        save_button.grid(row=13, column=5, padx=5, pady=5)
    
    def save_title_mail(self):
        """L∆∞u t√™n m√°y v√†o file monitor_time.json"""
        try:
            title_mail = self.entry_title_mail.get().strip()
            
            if not title_mail:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n m√°y!")
                return
            
            # ƒê·ªçc ho·∫∑c t·∫°o file monitor_time.json
            monitor_file = os.path.join(GF.join_directory_data(), 'monitor_time.json')
            
            if os.path.exists(monitor_file):
                with open(monitor_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {}
            
            # C·∫≠p nh·∫≠t title_mail
            data['title_mail'] = title_mail
            
            # L∆∞u file
            with open(monitor_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u t√™n m√°y: {title_mail}")
            print(f"‚úÖ ƒê√£ l∆∞u t√™n m√°y: {title_mail}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u t√™n m√°y: {e}")
            print(f"‚ùå L·ªói l∆∞u t√™n m√°y: {e}")
    
    def load_title_mail(self):
        """Load t√™n m√°y t·ª´ file monitor_time.json"""
        try:
            monitor_file = os.path.join(GF.join_directory_data(), 'monitor_time.json')
            
            if os.path.exists(monitor_file):
                with open(monitor_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    title_mail = data.get('title_mail', '')
                    self.entry_title_mail.delete(0, tk.END)
                    self.entry_title_mail.insert(0, title_mail)
                    print(f"üìù ƒê√£ load t√™n m√°y: {title_mail}")
            else:
                # Set default
                self.entry_title_mail.delete(0, tk.END)
                self.entry_title_mail.insert(0, "AutoVLBS Server")
                
        except Exception as e:
            print(f"‚ùå L·ªói load t√™n m√°y: {e}")
    
    def load_auto_data(self):
        """Load d·ªØ li·ªáu auto t·ª´ file"""
        # Load t√™n m√°y
        self.load_title_mail()
        
        try:
            data = self.data_manager.load_data()
            global_time_data = self.data_manager.load_global_time()
            
            # Load ƒë∆∞·ªùng d·∫´n tool auto
            self.entry_auto_path.delete(0, tk.END)
            self.entry_auto_path.insert(0, data.get('auto_tool_path', ''))
            
            for i, auto in enumerate(data.get('autoNames', [])):
                entry_game_name = ttk.Entry(self.auto_frame, width=40)
                entry_game_name.grid(row=i+1, column=1, padx=5, pady=5)
                entry_game_name.insert(0, auto)
            
            # Hi·ªÉn th·ªã th·ªùi gian sleepTime
            sleep_times = global_time_data.get('sleepTime', [])
            if sleep_times:
                self.entry_wait_game_open.delete(0, tk.END)
                self.entry_wait_game_open2.delete(0, tk.END)
                self.entry_wait_character_open.delete(0, tk.END)
                self.entry_wait_server_open.delete(0, tk.END)
                self.entry_wait_time_trainjx_open.delete(0, tk.END)
                self.entry_wait_time_autovlbs_open.delete(0, tk.END)
                self.entry_try_number.delete(0, tk.END)
                self.entry_global_time_sleep.delete(0, tk.END)
                self.varHideEffects.set(0)
                self.varStartUp.set(0)
                
                self.entry_wait_game_open.insert(0, sleep_times[0]['wait_time_open'])
                self.entry_wait_game_open2.insert(0, sleep_times[0]['wait_time_open2'])
                self.entry_wait_character_open.insert(0, sleep_times[0]['wait_time_load'])
                self.entry_wait_server_open.insert(0, sleep_times[0]['wait_time_server'])
                self.entry_wait_time_trainjx_open.insert(0, sleep_times[0]['wait_time_open_trainjx'])
                self.entry_wait_time_autovlbs_open.insert(0, sleep_times[0]['wait_time_load_autovlbs'])
                self.entry_try_number.insert(0, sleep_times[0]['try_number'])
                self.entry_global_time_sleep.insert(0, sleep_times[0]['global_time_sleep'])
                self.varHideEffects.set(sleep_times[0]['hide_effects'])
                self.varStartUp.set(sleep_times[0]['start_up'])
                
        except Exception as e:
            print(f"‚ùå L·ªói load auto data: {e}")
    
    def save_auto_data(self):
        """L∆∞u d·ªØ li·ªáu auto"""
        data = self.data_manager.load_data()
        global_time_data = self.data_manager.load_global_time()
        
        # L∆∞u ƒë∆∞·ªùng d·∫´n tool auto
        data['auto_tool_path'] = self.entry_auto_path.get().strip()
        
        # L∆∞u t√™n game auto
        autoNames = []
        for i in range(len(data['autoNames'])):
            entry_game_name = self.auto_frame.grid_slaves(row=i+1, column=1)[0]
            autoNames.append(entry_game_name.get())
        data['autoNames'] = autoNames
        
        # L∆∞u th·ªùi gian auto
        wait_time_open = self.entry_wait_game_open.get().strip()
        wait_time_open2 = self.entry_wait_game_open2.get().strip()
        wait_time_load = self.entry_wait_character_open.get().strip()
        wait_time_server = self.entry_wait_server_open.get().strip()
        wait_time_open_trainjx = self.entry_wait_time_trainjx_open.get().strip()
        wait_time_load_autovlbs = self.entry_wait_time_autovlbs_open.get().strip()
        try_number = self.entry_try_number.get().strip()
        edit_global_time_sleep = self.entry_global_time_sleep.get().strip()
        hide_effects = self.varHideEffects.get()
        start_up = self.varStartUp.get()
        
        global_time_data['sleepTime'] = [{
            'wait_time_open': int(wait_time_open) if wait_time_open.isdigit() else 12,
            'wait_time_open2': int(wait_time_open2) if wait_time_open2.isdigit() else 45,
            'wait_time_load': int(wait_time_load) if wait_time_load.isdigit() else 2,
            'wait_time_server': int(wait_time_server) if wait_time_server.isdigit() else 8,
            'wait_time_open_trainjx': int(wait_time_open_trainjx) if wait_time_open_trainjx.isdigit() else 2,
            'wait_time_load_autovlbs': int(wait_time_load_autovlbs) if wait_time_load_autovlbs.isdigit() else 3,
            'try_number': int(try_number) if try_number.isdigit() else 3,
            'global_time_sleep': int(edit_global_time_sleep) if edit_global_time_sleep.isdigit() else 2,
            'hide_effects': int(hide_effects),
            'start_up': int(start_up)
        }]
        
        # L∆∞u d·ªØ li·ªáu v√†o file JSON
        self.data_manager.save_data(data)
        self.data_manager.save_global_time_data(global_time_data)
        
        # Reload auto data to global variable
        # auto_tool_path = START_LOGIN.load_auto_tool_path()
        # sleepTime = START_LOGIN.load_sleepTime()
        
        if int(start_up) == 1:
            self.set_startup(True)
        else:
            self.set_startup(False)
        
        messagebox.showinfo("Success", "ƒê√£ l∆∞u th√†nh c√¥ng d·ªØ li·ªáu Auto Tool!")
    
    def browse_auto_path(self):
        """Ch·ªçn file ƒë∆∞·ªùng d·∫´n auto"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ƒë∆∞·ªùng d·∫´n AutoVLBS 1.9",
            filetypes=(("Executable Files", "*.exe"), ("All Files", "*.*"))
        )
        if file_path:
            self.entry_auto_path.delete(0, tk.END)
            self.entry_auto_path.insert(0, file_path)
            new_auto_tool_path = self.entry_auto_path.get().strip()
            
            if not new_auto_tool_path:
                messagebox.showwarning("Warning", "Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n tool auto!")
                return
    
    def set_startup(self, enable: bool):
        """T·∫°o ho·∫∑c x√≥a shortcut trong Startup ƒë·ªÉ ch·∫°y quick_run.bat khi m·ªü m√°y."""
        CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
        PARENT_DIR = os.path.dirname(CURRENT_DIR)
        PARENT_DIR = os.path.dirname(PARENT_DIR)
        QUICK_RUN_PATH = os.path.join(PARENT_DIR, "quick_run.vbs")
        
        startup_folder = winshell.startup()
        shortcut_path = os.path.join(startup_folder, "QuickRun.lnk")
        
        if enable:
            if not os.path.exists(shortcut_path):
                target = QUICK_RUN_PATH
                working_dir = os.path.dirname(target)
                
                shell = Dispatch('WScript.Shell')
                shortcut = shell.CreateShortCut(shortcut_path)
                shortcut.Targetpath = target
                shortcut.WorkingDirectory = working_dir
                shortcut.save()
                print(f"‚úÖ ƒê√£ t·∫°o shortcut: {shortcut_path}")
            else:
                print("‚ÑπÔ∏è Shortcut ƒë√£ t·ªìn t·∫°i.")
        else:
            if os.path.exists(shortcut_path):
                os.remove(shortcut_path)
                print("‚ùå ƒê√£ x√≥a shortcut, ·ª©ng d·ª•ng s·∫Ω kh√¥ng t·ª± ch·∫°y n·ªØa.")
            else:
                print("‚ÑπÔ∏è Kh√¥ng c√≥ shortcut ƒë·ªÉ x√≥a.")
