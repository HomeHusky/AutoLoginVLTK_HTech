# ===============================
# üß† AUTO LOGIN V√ï L√ÇM TRUY·ªÄN K·ª≤ - REFACTORED
# ===============================

# ================================================================
# üì¶ 1. IMPORT TH∆Ø VI·ªÜN
# ================================================================
import json
import subprocess
import tkinter as tk
from tkinter import messagebox, ttk
import startLogin as START_LOGIN
import realTimeCheckBugAutoVLBS as REAL_TIME_CHECK
import GlobalFunction as GF
import checkStatusAcounts
import threading
import pyautogui
import time
import os
import requests
import zipfile
import sys
import shutil
import notifier as NOTIFIER
import psutil
from datetime import datetime, timedelta

# Import c√°c tab modules
from tabs.tab_account_manager import AccountManagerTab
from tabs.tab_path_manager import PathManagerTab
from tabs.tab_status_manager import StatusManagerTab

# ================================================================
# ‚öôÔ∏è 2. BI·∫æN TO√ÄN C·ª§C / C·∫§U H√åNH
# ================================================================

is_checking_fix_vlbs = False
is_testing_code = False
pyautogui.FAILSAFE = False

# ================================================================
# üìÅ 3. DATA MANAGER CLASS
# ================================================================

class DataManager:
    """Class qu·∫£n l√Ω vi·ªác ƒë·ªçc/ghi d·ªØ li·ªáu JSON"""
    
    def __init__(self):
        self.accounts_file_path = 'accounts.json'
        self.global_time_file = 'global_time.json'
        self.servers_path = 'servers.json'
    
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ accounts.json"""
        try:
            return GF.read_json_file(self.accounts_file_path)
        except FileNotFoundError:
            return {
                "accounts": [],
                "autoNames": ["vocongtruyenky", "congthanhchienxua", "AutoVLBS"],
                "auto_tool_path": "D:/VoLamTruyenKy/AutoVLBS19/TrainJX.exe"
            }
    
    def load_global_time(self):
        """T·∫£i d·ªØ li·ªáu th·ªùi gian global"""
        try:
            return GF.read_config_file(self.global_time_file)
        except FileNotFoundError:
            return {
                "sleepTime": [{
                    "wait_time_open": 15,
                    "wait_time_open2": 45,
                    "wait_time_load": 2,
                    "wait_time_server": 8,
                    "wait_time_open_trainjx": 3,
                    "wait_time_load_autovlbs": 5,
                    "try_number": 3,
                    "global_time_sleep": 1,
                    "hide_effects": 1,
                    "start_up": 1
                }]
            }
    
    def save_data(self, data):
        """L∆∞u d·ªØ li·ªáu v√†o accounts.json"""
        with open(os.path.join(GF.join_directory_data(), self.accounts_file_path), 'w') as file:
            json.dump(data, file, ensure_ascii=True, indent=4)
    
    def save_global_time_data(self, data):
        """L∆∞u d·ªØ li·ªáu th·ªùi gian global"""
        with open(os.path.join(GF.join_directory_config(), self.global_time_file), 'w') as file:
            json.dump(data, file, ensure_ascii=True, indent=4)

# ================================================================
# üéØ 4. MAIN APPLICATION CLASS
# ================================================================

class AutoLoginApp:
    def __init__(self, root):
        self.root = root
        self.data_manager = DataManager()
        
        # Bi·∫øn to√†n c·ª•c
        self.login_thread = None
        self.auto_update_thread = None
        self.is_running_AutoUpdate = False
        self.stop_AutoUpdate_event = False
        self.currentAutoName = None
        self.auto_tool_path = None
        self.sleepTime = None
        self.global_time_sleep = GF.load_global_time_sleep()
        
        # Kh·ªüi t·∫°o currentAutoName
        try:
            self.currentAutoName = GF.getNameAutoVLBS()
        except Exception as e:
            print("Error", str(e))
        
        # Thi·∫øt l·∫≠p giao di·ªán
        self.setup_window()
        self.setup_styles()
        self.create_tabs()
        
        # Load d·ªØ li·ªáu ban ƒë·∫ßu
        self.initialize_data()
    
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        version = self.get_current_version()
        self.root.title(f"Auto Login Htechnology - {version}")
        self.root.geometry("850x700+0+0")
        self.root.resizable(True, True)
    
    def setup_styles(self):
        """Thi·∫øt l·∫≠p styles cho giao di·ªán"""
        style = ttk.Style()
        style.theme_use('clam')
        
        style.configure("TButton",
                       padding=6,
                       relief="flat",
                       background="#5783db",
                       foreground="white")
        
        style.map("TButton", background=[('active', '#4681f4')])
        
        style.configure("TLabel", padding=6, font=('Arial', 10))
        style.configure("Treeview.Heading", font=('Arial', 10, 'bold'))
        style.configure("Treeview", rowheight=25)
    
    def create_tabs(self):
        """T·∫°o c√°c tab"""
        self.tab_control = ttk.Notebook(self.root)
        
        # T·∫°o c√°c frame cho tabs
        self.account_tab_frame = ttk.Frame(self.tab_control)
        self.path_tab_frame = ttk.Frame(self.tab_control)
        self.status_tab_frame = ttk.Frame(self.tab_control)
        
        # Th√™m tabs v√†o notebook
        self.tab_control.add(self.account_tab_frame, text="Qu·∫£n l√Ω T√†i kho·∫£n")
        self.tab_control.add(self.path_tab_frame, text="Qu·∫£n l√Ω ƒê∆∞·ªùng d·∫´n")
        self.tab_control.add(self.status_tab_frame, text="Tr·∫°ng th√°i T√†i kho·∫£n")
        
        # T·∫°o callbacks dictionary
        callbacks = self.create_callbacks()
        
        # Kh·ªüi t·∫°o c√°c tab managers
        self.account_tab = AccountManagerTab(self.account_tab_frame, self.data_manager, callbacks)
        self.path_tab = PathManagerTab(self.path_tab_frame, self.data_manager)
        self.status_tab = StatusManagerTab(self.status_tab_frame, self.data_manager, callbacks)
        
        # Bind events
        self.path_tab_frame.bind("<Visibility>", lambda e: self.path_tab.load_auto_data())
        self.tab_control.bind("<<NotebookTabChanged>>", self.on_tab_selected)
        
        self.tab_control.pack(expand=1, fill="both")
    
    def create_callbacks(self):
        """T·∫°o dictionary ch·ª©a c√°c callback functions"""
        return {
            'update_app': self.update_app,
            'alway_update_app': self.alway_update_app,
            'start_login': self.start_login,
            'stop_login': self.stop_login,
            'test_accounts': self.test_accounts,
            'run_all_auto_update': self.run_all_auto_update,
            'is_checking_fix_vlbs': lambda: is_checking_fix_vlbs,
            'set_checking_fix_vlbs': self.set_checking_fix_vlbs,
            'get_entry_title_mail': lambda: self.status_tab.get_entry_title_mail(),
            'get_current_auto_name': lambda: self.currentAutoName
        }
    
    def initialize_data(self):
        """Kh·ªüi t·∫°o d·ªØ li·ªáu ban ƒë·∫ßu"""
        if self.currentAutoName != None:
            print("isAutoVLBS running: True")
            self.run_check_status(1)
        
        self.account_tab.load_to_gui()
        
        # Ch·∫°y sau khi UI load xong
        self.root.after(4000, self.run_after_ui)
    
    def on_tab_selected(self, event):
        """X·ª≠ l√Ω khi chuy·ªÉn tab"""
        selected_tab = self.tab_control.index(self.tab_control.select())
        if selected_tab == self.tab_control.index(self.status_tab_frame):
            self.status_tab.load_initial_deposit_account()
            self.status_tab.save_gom_account()
            self.status_tab.load_to_tab_money_manager()
        elif selected_tab == self.tab_control.index(self.account_tab_frame):
            self.account_tab.load_to_gui()
    
    # ==================== VERSION & UPDATE METHODS ====================
    
    def get_current_version(self):
        """L·∫•y phi√™n b·∫£n hi·ªán t·∫°i"""
        version_file = "version.txt"
        try:
            with open(version_file, "r") as file:
                return file.read().strip()
        except FileNotFoundError:
            print(f"File {version_file} kh√¥ng t·ªìn t·∫°i.")
            return None
    
    def check_for_update(self):
        """Ki·ªÉm tra c·∫≠p nh·∫≠t"""
        url = "https://raw.githubusercontent.com/HomeHusky/AutoLoginVLTK_HTech/master/version.txt"
        current_version = self.get_current_version()
        
        if current_version is None:
            print("Kh√¥ng th·ªÉ ki·ªÉm tra phi√™n b·∫£n hi·ªán t·∫°i.")
            return False
        
        try:
            response = requests.get(url)
            if response.status_code == 200:
                latest_version = response.text.strip()
                if latest_version != current_version:
                    confirm = messagebox.askyesno("Th√¥ng b√°o", "C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi, b·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t?")
                    if confirm:
                        print(f"Chu·∫©n b·ªã c·∫≠p nh·∫≠t m·ªõi: {latest_version}")
                        return True
                    else:
                        return 2
                else:
                    print("B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t.")
            else:
                print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn GitHub.")
        except Exception as e:
            print(f"L·ªói khi ki·ªÉm tra c·∫≠p nh·∫≠t: {e}")
        
        return False
    
    def download_and_update(self):
        """T·∫£i v√† c·∫≠p nh·∫≠t ·ª©ng d·ª•ng"""
        url = "https://github.com/HomeHusky/AutoLoginVLTK_HTech/archive/refs/heads/master.zip"
        zip_path = "update.zip"
        
        try:
            response = requests.get(url)
            with open(zip_path, "wb") as file:
                file.write(response.content)
            
            temp_dir = "temp_update"
            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(temp_dir)
            
            extracted_dir = os.path.join(temp_dir, os.listdir(temp_dir)[0])
            for item in os.listdir(extracted_dir):
                s = os.path.join(extracted_dir, item)
                d = os.path.join(".", item)
                if os.path.isdir(s):
                    if os.path.exists(d):
                        shutil.rmtree(d)
                    shutil.move(s, d)
                else:
                    shutil.move(s, d)
            
            os.remove(zip_path)
            shutil.rmtree(temp_dir)
            
            print("C·∫≠p nh·∫≠t th√†nh c√¥ng!")
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t: {e}")
    
    def restart_app(self):
        """Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng"""
        python = sys.executable
        os.execl(python, python, *sys.argv)
    
    def update_app(self):
        """C·∫≠p nh·∫≠t ·ª©ng d·ª•ng"""
        try:
            result = self.check_for_update()
            
            if not result:
                messagebox.showinfo("Update", "B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t.")
            elif result == 2:
                pass
            else:
                self.download_and_update()
                messagebox.showinfo("Update", "·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng. B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông l·∫°i.")
                self.restart_app()
        except Exception as e:
            messagebox.showerror("Update Failed", f"Qu√° tr√¨nh c·∫≠p nh·∫≠t th·∫•t b·∫°i: {e}")
    
    def alway_update_app(self):
        """Lu√¥n c·∫≠p nh·∫≠t ·ª©ng d·ª•ng"""
        try:
            self.download_and_update()
            messagebox.showinfo("Update", "·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng. B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông l·∫°i.")
            self.restart_app()
        except Exception as e:
            messagebox.showerror("Update Failed", f"Qu√° tr√¨nh c·∫≠p nh·∫≠t th·∫•t b·∫°i: {e}")
    
    # ==================== LOGIN METHODS ====================
    
    def run_check_status(self, tryTest):
        """Ki·ªÉm tra tr·∫°ng th√°i Auto VLBS"""
        self.auto_tool_path = START_LOGIN.load_auto_tool_path()
        self.sleepTime = START_LOGIN.load_sleepTime()
        self.currentAutoName = GF.getNameAutoVLBS()
        
        if not checkStatusAcounts.checkStatusAcounts(self.auto_tool_path, self.currentAutoName, self.sleepTime):
            self.currentAutoName = GF.getNameAutoVLBS()
            
            # Ki·ªÉm tra Auto VLBS c√≥ ch·∫°y trong background kh√¥ng
            if not GF.checkAutoVlbsBackGroundRunning():
                # N·∫øu kh√¥ng ch·∫°y v√† c√≤n l·∫ßn th·ª≠ -> th·ª≠ l·∫°i
                if tryTest > 0:
                    print(f"Auto VLBS kh√¥ng ch·∫°y, th·ª≠ l·∫°i... (c√≤n {tryTest} l·∫ßn)")
                    self.run_check_status(tryTest-1)
                    return
                else:
                    # H·∫øt l·∫ßn th·ª≠ -> b√°o l·ªói
                    print("ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠, Auto VLBS kh√¥ng ch·∫°y!")
                    messagebox.showerror("Error", f"C√≥ l·ªói x·∫£y ra d√≤ng 32 autoLogin!")
                    return
            else:
                # Auto VLBS ƒëang ch·∫°y -> th√†nh c√¥ng
                print("Auto VLBS ƒëang ch·∫°y trong background")
                return
    
    def start_login(self, isAutoClickVLBS):
        """B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p"""
        confirm = messagebox.askyesno(
            "Th√¥ng b√°o",
            "Vui l√≤ng chuy·ªÉn sang ti·∫øng Anh v√† t·∫Øt CAPS LOCK tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu. B·∫°n ƒë√£ th·ª±c hi·ªán ch∆∞a?"
        )
        
        if confirm:
            try:
                self.run_check_status(1)
                pass_accounts = self.account_tab.get_pass_accounts()
                self.login_thread = threading.Thread(
                    target=START_LOGIN.runStartLogin,
                    args=(isAutoClickVLBS, self.on_login_complete, self.currentAutoName, 
                         pass_accounts, self.on_login_username)
                )
                self.login_thread.start()
            except Exception as e:
                messagebox.showerror("Error", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {e}")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng th·ª±c hi·ªán y√™u c·∫ßu tr∆∞·ªõc khi ti·∫øp t·ª•c.")
    
    def start_login_without_confirm(self, isAutoClickVLBS):
        """B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p kh√¥ng c·∫ßn x√°c nh·∫≠n"""
        try:
            self.run_check_status(1)
            pass_accounts = self.account_tab.get_pass_accounts()
            self.login_thread = threading.Thread(
                target=START_LOGIN.runStartLogin,
                args=(isAutoClickVLBS, self.on_login_complete, self.currentAutoName, 
                     pass_accounts, self.on_login_username)
            )
            self.login_thread.start()
        except Exception as e:
            messagebox.showerror("Error", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {e}")
    
    def stop_login(self):
        """D·ª´ng ƒëƒÉng nh·∫≠p"""
        try:
            START_LOGIN.stop()
            if self.login_thread and self.login_thread.is_alive():
                self.login_thread.join()
            messagebox.showinfo("Stopped", "D·ª´ng ƒëƒÉng nh·∫≠p th√†nh c√¥ng.")
        except Exception as e:
            messagebox.showerror("Error", f"Kh√¥ng th·ªÉ d·ª´ng qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {e}")
    
    def test_accounts(self):
        """Test t√†i kho·∫£n"""
        self.run_check_status(1)
        messagebox.showinfo("Success", "Ki·ªÉm tra th√†nh c√¥ng.")
        self.account_tab.load_to_gui()
    
    def on_login_complete(self):
        """Callback khi ƒëƒÉng nh·∫≠p ho√†n t·∫•t"""
        self.account_tab.clear_pass_accounts()
        print(self.account_tab.get_pass_accounts())
        self.run_check_status(1)
        self.account_tab.load_to_gui()
        
        time_stamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        is_all_accounts_logged_in = False
        file_path = "accounts.json"
        pass_monitor = self.get_pass_monitor()
        
        print("MAU KHAU THEO DOI:", pass_monitor)
        if self.all_accounts_logged_in(file_path):
            print("‚úÖ T·∫•t c·∫£ account ƒë√£ login.")
            if is_checking_fix_vlbs:
                return
            is_all_accounts_logged_in = True
            
            print(pass_monitor == '0919562182qQ!')
            if pass_monitor == '0919562182qQ!':
                # G·ªçi h√†m start check fix VLBS
                pass
        else:
            print("‚ùå V·∫´n c√≤n account ch∆∞a login.")
        
        if pass_monitor == '0919562182qQ!':
            entry_title_mail = self.status_tab.get_entry_title_mail()
            NOTIFIER.send_discord_login_report(entry_title_mail, time_stamp, is_all_accounts_logged_in)
    
    def on_login_username(self, username):
        """Callback khi ƒëƒÉng nh·∫≠p username"""
        self.account_tab.update_status_to_logged_in(username)
    
    def all_accounts_logged_in(self, json_path: str) -> bool:
        """Ki·ªÉm tra t·∫•t c·∫£ account ƒë√£ login ch∆∞a"""
        with open(os.path.join(GF.join_directory_data(), json_path), "r") as f:
            data = json.load(f)
        
        accounts = data.get("accounts", [])
        if not accounts:
            return False
        
        for acc in accounts:
            if not acc.get("is_logged_in", False):
                return False
        
        return True
    
    def get_pass_monitor(self):
        """L·∫•y password monitor"""
        pass_file = "pass_monitor.txt"
        try:
            with open(pass_file, "r") as file:
                return file.read().strip()
        except FileNotFoundError:
            print(f"File {pass_file} kh√¥ng t·ªìn t·∫°i.")
            return None
    
    # ==================== AUTO UPDATE METHODS ====================
    
    def run_all_auto_update(self):
        """Ch·∫°y t·∫•t c·∫£ auto update"""
        global is_running_AutoUpdate, stop_AutoUpdate_event, auto_update_thread
        
        if not self.is_running_AutoUpdate:
            confirm = messagebox.askyesno(
                "Th√¥ng b√°o",
                "Thao t√°c n√†y s·∫Ω ch·∫°y t·∫•t c·∫£ AutoUpdate c·ªßa c√°c server m√† d·ªØ li·ªáu ƒëang c√≥!"
            )
            if confirm:
                self.stop_AutoUpdate_event = False
                self.is_running_AutoUpdate = True
                
                GF.copy_auto_update_path_to_auto_update_path()
                GF.copy_auto_update_path_to_fix_web_ctcx_path()
                GF.replace_AutoUpdate_to_fix_web_ctcx()
                
                fix_web_ctcx_file = 'fix_web_ctcx.json'
                auto_update_file = 'autoUpdate_path.json'
                fix_web_ctcx_data = GF.read_json_file(fix_web_ctcx_file)
                auto_update_data = GF.read_json_file(auto_update_file)
                
                print("ƒê√£ ch·∫°y AutoUpdate c·ªßa c√°c server!")
                self.auto_update_thread = threading.Thread(
                    target=self.thread_auto_update,
                    args=(auto_update_data, fix_web_ctcx_data, self.on_auto_update_success)
                )
                self.auto_update_thread.daemon = True
                self.auto_update_thread.start()
            else:
                return
        else:
            self.is_running_AutoUpdate = False
            self.stop_AutoUpdate_event = True
    
    def thread_auto_update(self, auto_update_data, fix_web_ctcx_data, callback):
        """Thread ch·∫°y auto update"""
        for path in fix_web_ctcx_data['fix_web_ctcx_paths']:
            if self.stop_AutoUpdate_event:
                messagebox.showinfo("Th√¥ng b√°o", "D·ª´ng AutoUpdate th√†nh c√¥ng!")
                return
            try:
                print(path)
                working_dir = os.path.dirname(path)
                try:
                    subprocess.Popen(path, cwd=working_dir)
                except Exception as e:
                    print("L·ªói khi m·ªü fix_web:", e)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file {path}: {str(e)}")
        
        for path in auto_update_data['auto_update_paths']:
            if self.stop_AutoUpdate_event:
                messagebox.showinfo("Th√¥ng b√°o", "D·ª´ng AutoUpdate th√†nh c√¥ng!")
                return
            try:
                print(path)
                working_dir = os.path.dirname(path)
                try:
                    subprocess.Popen(path, cwd=working_dir)
                except Exception as e:
                    print("L·ªói khi m·ªü AutoUpdate:", e)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file {path}: {str(e)}")
        callback()
    
    def on_auto_update_success(self):
        """Callback khi auto update th√†nh c√¥ng"""
        self.is_running_AutoUpdate = False
        self.stop_AutoUpdate_event = True
        messagebox.showinfo("Th√¥ng b√°o", "Ch·∫°y AutoUpdate th√†nh c√¥ng!")
    
    # ==================== STARTUP METHODS ====================
    
    def is_system_just_booted(self, threshold_minutes=2):
        """Ki·ªÉm tra xem h·ªá th·ªëng v·ª´a m·ªõi kh·ªüi ƒë·ªông hay kh√¥ng"""
        try:
            boot_time = datetime.fromtimestamp(psutil.boot_time())
            current_time = datetime.now()
            uptime = current_time - boot_time
            
            print(f"Boot time: {boot_time}")
            print(f"Current time: {current_time}")
            print(f"Uptime: {uptime}")
            
            return uptime < timedelta(minutes=threshold_minutes)
        except Exception as e:
            print(f"Error checking boot time: {e}")
            return False
    
    def run_after_ui(self):
        """Ch·∫°y sau khi UI load xong"""
        try:
            is_start_up = START_LOGIN.load_sleepTime()[0]['start_up']
            if is_start_up == 1:
                if self.is_system_just_booted(threshold_minutes=2):
                    print("is_start_up: True - System just booted, starting auto login...")
                    self.start_login_without_confirm(1)
                else:
                    print("is_start_up: True - But system has been running for a while, skipping auto login.")
            else:
                print("is_start_up: False")
        except Exception as e:
            print("Error", str(e))
    
    def set_checking_fix_vlbs(self, value):
        """Set tr·∫°ng th√°i checking fix vlbs"""
        global is_checking_fix_vlbs
        is_checking_fix_vlbs = value

# ================================================================
# üöÄ 5. MAIN ENTRY POINT
# ================================================================

if __name__ == "__main__":
    root = tk.Tk()
    app = AutoLoginApp(root)
    root.mainloop()
