import GlobalFunction as GF
import threading
from pywinauto import Application
import pyautogui
import time
import os
import json
from pywinauto.keyboard import send_keys

stop_flag = False
global_time_sleep = GF.load_global_time_sleep()

def get_account_by_ingame(ingame_name, file_path='accounts.json'):

    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        for account in data.get('accounts', []):
            if account.get('ingame') == ingame_name:
                return account
    return None  # Kh√¥ng t√¨m th·∫•y

def get_password_by_ingame(ingame_name, file_path='accounts.json'):

    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        for account in data.get('accounts', []):
            if account.get('ingame') == ingame_name:
                return account.get('password')
    return None 

def fixErrorAccounts(error_accounts_array):
    """
    S·ª≠a l·ªói t√†i kho·∫£n b·ªã l·ªói game.
    :param error_accounts_array: Danh s√°ch t√†i kho·∫£n b·ªã l·ªói.
    """
    print("üîß ƒêang s·ª≠a l·ªói t√†i kho·∫£n...")
    for account in error_accounts_array:
        account_name = account['account']
        # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a l·ªói cho t√†i kho·∫£n
        print(f"üîß ƒêang s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
        # Gi·∫£ s·ª≠ c√≥ m·ªôt h√†m ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c s·ª≠a l·ªói c·ª• th·ªÉ
        fix_account(account_name)

def fix_account(account_name):
    """
    Gi·∫£ l·∫≠p vi·ªác s·ª≠a l·ªói cho t√†i kho·∫£n.
    :param account_name: T√™n t√†i kho·∫£n c·∫ßn s·ª≠a l·ªói.
    """
    list_control = None
    for attempt in range(3):
        try:
            print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
            # backend = GF.get_backend()
            list_control = Application(backend="uia").connect(title_re='^Quan ly nhan vat.*').window(title_re='^Quan ly nhan vat.*').child_window(control_type="List")
            print("K·∫øt n·ªëi th√†nh c√¥ng!")
            break  # N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
        except Exception as e:
            print(f"L·ªói khi k·∫øt n·ªëi (l·∫ßn {attempt + 1}): {e}")
            # backend = GF.get_backend()
            nameAutoVLBS = GF.getNameAutoVLBS()
            if not GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS):
                autovlbs_control = Application(backend="uia").connect(title_re=nameAutoVLBS).window(title_re=nameAutoVLBS).child_window(control_type="List")
                if not autovlbs_control.exists():
                    print("Kh√¥ng t√¨m th·∫•y b·∫£ng!")
                else:
                    try:
                        # C√°ch 1: D√πng ph√≠m Home
                        autovlbs_control.set_focus()
                        autovlbs_control.type_keys("{HOME}")
                        
                        # Ho·∫∑c c√°ch 2: D√πng scroll pattern (n·∫øu ·ª©ng d·ª•ng h·ªó tr·ª£)
                        # autovlbs_control.iface_scroll.SetScrollPercent(horizontalPercent=None, verticalPercent=0)
                        
                        time.sleep(0.5)  # ƒê·ª£i scroll ho√†n th√†nh
                    except Exception as e:
                        print(f"L·ªói khi scroll: {str(e)}")
                    # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
                    # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
                    items = autovlbs_control.children(control_type="ListItem")
                    if items:
                        items[0].right_click_input()
                    else:
                        print("Kh√¥ng c√≥ m·ª•c n√†o trong danh s√°ch!")
    time.sleep(3)
    
    # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
    items = list_control.children(control_type="ListItem")
    for item in items:
        countChild = 0
        for child in item.children():
            if countChild == 1:
                if child.window_text() == account_name:
                    print(f"ƒê√£ t√¨m th·∫•y t√†i kho·∫£n: {account_name}")
                    print(f"ƒêang s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
                    # Nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c n√†y
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ m·ªü game
                    # Gi·∫£ l·∫≠p vi·ªác s·ª≠a l·ªói, v√≠ d·ª•: ƒëƒÉng nh·∫≠p l·∫°i
                    # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a l·ªói c·ª• th·ªÉ t·∫°i ƒë√¢y
                    # V√≠ d·ª•: g·ªçi h√†m ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c th·ª±c hi·ªán thao t√°c kh√°c
                    pyautogui.hotkey('alt', 'x')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.write(get_password_by_ingame(account_name), interval=0.1)
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(2)
                    pyautogui.hotkey('ctrl', 'g')
                    time.sleep(global_time_sleep)
                    pyautogui.press('esc')
                    time.sleep(2)
                    item.right_click_input()
                    time.sleep(global_time_sleep)
                    send_keys("{DOWN}") # 1
                    send_keys("{DOWN}") # 2
                    send_keys("{DOWN}") # 3
                    send_keys("{DOWN}") # 4
                    send_keys("{DOWN}") # 5
                    send_keys("{DOWN}") # 6
                    send_keys("{DOWN}") # 7
                    time.sleep(global_time_sleep)
                    send_keys("{ENTER}")
                    time.sleep(2)
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ ·∫©n game
                    time.sleep(global_time_sleep)
                    item.right_click_input()
                    time.sleep(global_time_sleep)
                    send_keys("{DOWN}")
                    time.sleep(global_time_sleep)
                    send_keys("{ENTER}")
                    print(f"‚úÖ ƒê√£ s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
                    return
            countChild += 1
    print(f"Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n: {account_name} trong danh s√°ch.")

def relogin_lost_accounts(lost_accounts_array):
    """
    ƒêƒÉng nh·∫≠p l·∫°i c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi.
    :param lost_accounts_array: Danh s√°ch t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi.
    """
    print("üîÑ ƒêang ƒëƒÉng nh·∫≠p l·∫°i c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi...")
    for account in lost_accounts_array:
        account_name = account['account']
        # Th·ª±c hi·ªán c√°c b∆∞·ªõc ƒëƒÉng nh·∫≠p l·∫°i cho t√†i kho·∫£n
        print(f"üîÑ ƒêang ƒëƒÉng nh·∫≠p l·∫°i cho t√†i kho·∫£n: {account_name}")
        # Gi·∫£ s·ª≠ c√≥ m·ªôt h√†m ƒëƒÉng nh·∫≠p l·∫°i
        relogin_account(account_name)

def relogin_account(account_name):
    """
    Gi·∫£ l·∫≠p vi·ªác ƒëƒÉng nh·∫≠p l·∫°i cho t√†i kho·∫£n.
    :param account_name: T√™n t√†i kho·∫£n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.
    """

def start_fixing(error_accounts_array):
    global stop_flag
    stop_flag = False
    t = threading.Thread(target=fixErrorAccounts, args=(error_accounts_array,), daemon=True)
    t.start()
    print("üîÅ B·∫Øt ƒë·∫ßu s·ª≠a...")

def stop_fixing():
    global stop_flag
    stop_flag = True
    print("‚õî Y√™u c·∫ßu d·ª´ng s·ª≠a.")

if __name__ == "__main__":
    fix_account()