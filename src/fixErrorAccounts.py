import GlobalFunction as GF
import threading
from pywinauto import Application
import pyautogui
import time
import os
import json
from pywinauto.keyboard import send_keys
import startLogin as START_LOGIN
import checkStatusAcounts as CHECK_STATUS

stop_flag = False
global_time_sleep = GF.load_global_time_sleep()

def load_accounts(file_path='accounts.json'):
    with open(os.path.join(GF.join_directory_data(), file_path), 'r') as file:
        data = json.load(file)
        return data['accounts']

def load_auto_tool_path(file_path='accounts.json'):
    with open(os.path.join(GF.join_directory_data(), file_path), 'r') as file:
        data = json.load(file)
        return data['auto_tool_path']

def load_sleepTime(file_path='global_time.json'):
    with open(os.path.join(GF.join_directory_config(), file_path), 'r') as file:
        data = json.load(file)
        return data['sleepTime']
    
def scroll_to_list_item(list_control, index):
    list_items = list_control.children(control_type="ListItem")
    if index < 0 or index >= len(list_items):
        print("‚ùå Index kh√¥ng h·ª£p l·ªá.")
        return

    target_item = list_items[index]

    # D√πng keyboard ƒë·ªÉ cu·ªôn ƒë·∫øn item
    list_control.set_focus()
    list_control.type_keys("{HOME}")
    
    # Cu·ªôn xu·ªëng ƒë·∫øn ƒë√∫ng d√≤ng
    for _ in range(index):
        send_keys("{DOWN}")
        time.sleep(0.05)

    # Khi ƒë√£ hi·ªÉn th·ªã tr√™n m√†n h√¨nh, click v√†o item
    target_item.click_input()

def get_length_online_accounts(file_path='accounts.json'):
    """
    L·∫•y danh s√°ch c√°c t√†i kho·∫£n ƒëang online t·ª´ file JSON.
    :param file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a th√¥ng tin t√†i kho·∫£n.
    :return: Danh s√°ch c√°c t√†i kho·∫£n ƒëang online.
    """
    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        online_accounts = [account for account in data.get('accounts', []) if account.get('is_logged_in')]
    return len(online_accounts)

def get_length_all_accounts(file_path='accounts.json'):
    """
    L·∫•y t·ªïng s·ªë l∆∞·ª£ng t√†i kho·∫£n t·ª´ file JSON.
    :param file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a th√¥ng tin t√†i kho·∫£n.
    :return: T·ªïng s·ªë l∆∞·ª£ng t√†i kho·∫£n.
    """
    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        return len(data.get('accounts', []))

def get_account_by_ingame(ingame_name, file_path='accounts.json'):

    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        for account in data.get('accounts', []):
            if account.get('ingame') == ingame_name:
                return account
    return None  # Kh√¥ng t√¨m th·∫•y

def get_password_by_ingame(ingame_name, file_path='accounts.json'):

    full_path = os.path.join(GF.join_directory_data(), file_path)
    with open(full_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
        for account in data.get('accounts', []):
            if account.get('ingame') == ingame_name:
                return account.get('password')
    return None 

def fixErrorAccounts(error_accounts_array):
    """
    S·ª≠a l·ªói t√†i kho·∫£n b·ªã l·ªói game.
    :param error_accounts_array: Danh s√°ch t√†i kho·∫£n b·ªã l·ªói.
    """
    print("üîß ƒêang s·ª≠a l·ªói t√†i kho·∫£n...")
    for account in error_accounts_array:
        account_name = account['account']
        # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a l·ªói cho t√†i kho·∫£n
        print(f"üîß ƒêang s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
        # Gi·∫£ s·ª≠ c√≥ m·ªôt h√†m ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c s·ª≠a l·ªói c·ª• th·ªÉ
        fix_account(account_name)
        time.sleep(global_time_sleep)
    print("üîß Ho√†n th√†nh s·ª≠a l·ªói t√†i kho·∫£n.")

def fix_account(account_name):
    """
    Gi·∫£ l·∫≠p vi·ªác s·ª≠a l·ªói cho t√†i kho·∫£n.
    :param account_name: T√™n t√†i kho·∫£n c·∫ßn s·ª≠a l·ªói.
    """
    list_control = None

    for attempt in range(3):
        try:
            print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
            # backend = GF.get_backend()
            nameAutoVLBS = GF.getNameAutoVLBS()
            GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS)
            app = Application(backend="uia").connect(title_re=nameAutoVLBS)
            dlg = app.window(title_re=nameAutoVLBS)

            # L·∫•y t·∫•t c·∫£ control lo·∫°i List trong c·ª≠a s·ªï
            list_controls = dlg.descendants(control_type="List")

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† l·∫•y theo ƒëi·ªÅu ki·ªán
            if len(list_controls) == 3:
                print("C√≥ 3 List control, l·∫•y c√°i ƒë·∫ßu ti√™n.")
                list_control = list_controls[2]  # l·∫•y c√°i ƒë·∫ßu ti√™n
            else:
                list_control = dlg.child_window(control_type="List")  # m·∫∑c ƒë·ªãnh n·∫øu ch·ªâ c√≥ 1   
            break  # Tho√°t v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi ƒë·∫øn ·ª©ng d·ª•ng l·∫ßn {attempt + 1}: {e}")
            time.sleep(2)

    # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
    items = list_control.children(control_type="ListItem")
    for i, item in enumerate(items):
        countChild = 0
        for child in item.children():
            if countChild == 0:
                if child.window_text() == account_name:
                    scroll_to_list_item(list_control, i)
                    print(f"ƒê√£ t√¨m th·∫•y t√†i kho·∫£n: {account_name}")
                    print(f"ƒêang s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
                    # Nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c n√†y
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ m·ªü game
                    # Gi·∫£ l·∫≠p vi·ªác s·ª≠a l·ªói, v√≠ d·ª•: ƒëƒÉng nh·∫≠p l·∫°i
                    # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a l·ªói c·ª• th·ªÉ t·∫°i ƒë√¢y
                    # V√≠ d·ª•: g·ªçi h√†m ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c th·ª±c hi·ªán thao t√°c kh√°c
                    pyautogui.hotkey('alt', 'x')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.write(get_password_by_ingame(account_name), interval=0.1)
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(2)
                    pyautogui.hotkey('ctrl', 'g')
                    time.sleep(global_time_sleep)
                    pyautogui.press('esc')
                    time.sleep(2)
                    time.sleep(global_time_sleep)
                    # item.type_keys("{SPACE}")
                    # time.sleep(2)
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ ·∫©n game
                    time.sleep(global_time_sleep)
                    # item.type_keys("{SPACE}")
                    print(f"‚úÖ ƒê√£ s·ª≠a l·ªói cho t√†i kho·∫£n: {account_name}")
                    return
            countChild += 1
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n: {account_name} trong danh s√°ch.")

def relogin_lost_accounts():
    """
    ƒêƒÉng nh·∫≠p l·∫°i c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi.
    :param lost_accounts_array: Danh s√°ch t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi.
    """
    print("üîÑ ƒêang ki·ªÉm tra v√† ƒëƒÉng nh·∫≠p l·∫°i c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi...")
    relogin_account()

def relogin_account():
    """
    Gi·∫£ l·∫≠p vi·ªác ƒëƒÉng nh·∫≠p l·∫°i cho t√†i kho·∫£n.
    :param account_name: T√™n t√†i kho·∫£n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.
    """
    try:
        auto_tool_path = START_LOGIN.load_auto_tool_path()
        sleepTime = START_LOGIN.load_sleepTime()
        global currentAutoName
        currentAutoName = GF.getNameAutoVLBS()
        CHECK_STATUS.checkStatusAcounts(auto_tool_path, currentAutoName, sleepTime)
        online_accounts = get_length_online_accounts()
        all_accounts = get_length_all_accounts()
        if online_accounts < all_accounts:
            print(f"ƒêang m·ªõi c√≥ {online_accounts} acc ƒëang online so v·ªõi {all_accounts}.")
            run_reLogin(currentAutoName, True)
            CHECK_STATUS.checkStatusAcounts(auto_tool_path, currentAutoName, sleepTime)
            print("Ho√†n th√†nh login!")
        else:
            print(f"T·∫•t c·∫£ {all_accounts} t√†i kho·∫£n ƒë·ªÅu ƒëang online.")
        # Gi·∫£ l·∫≠p vi·ªác ƒëƒÉng nh·∫≠p l·∫°i, v√≠ d·ª•: m·ªü game v√† nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p

    except Exception as e:
        print(f"‚ùå L·ªói khi ƒëƒÉng nh·∫≠p l·∫°i: {e}")

def run_reLogin(currentAutoName, isAutoClickVLBS):
    """
    Ch·∫°y qu√° tr√¨nh ƒëƒÉng nh·∫≠p l·∫°i cho c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi.
    """
    GF.minimizeWindow("Auto Login Htech")
    global stop_login
    stop_login = False  # Reset c·ªù d·ª´ng khi b·∫Øt ƒë·∫ßu
    sleepTime = load_sleepTime()
    accounts = load_accounts()
    for account in accounts:
        tryLoginNumber = sleepTime[0]['try_number']
        login_success = 0
        isChangedServer = False
        if stop_login:
            break  # D·ª´ng qu√° tr√¨nh n·∫øu c·ªù ƒë∆∞·ª£c ƒë·∫∑t
        for i in range(tryLoginNumber):
            if login_success == 1:
                continue
            if account['is_logged_in'] != True:
                if login_success == 2:
                    if not isChangedServer:
                        isChangedServer = True
                        print(f"Login l·∫ßn {i+1} v√† th·ª≠ l·∫°i!")
                elif login_success == 3:
                    print(f"Login l·∫ßn {i+1} v√¨ tr∆∞·ªõc ƒë√≥ kh√¥ng hi·ªán gamme!")
                elif login_success == 4:
                    print(f"Login l·∫ßn {i+1} v√¨ tr∆∞·ªõc ƒë√≥ game t·ª± t·∫Øt sau khi ch·∫°y auto!")
                    login_success = START_LOGIN.auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, False)
                else:
                    print(f"Login l·∫ßn {i+1}")
                    login_success = START_LOGIN.auto_login(account, sleepTime, currentAutoName, isAutoClickVLBS, False)
            if i == (tryLoginNumber-1):
                if login_success != 1:
                    # add_server_fail_value('fail_servers.json', account['auto_update_path'])
                    print(f"Server failed for account {account['username']}")
    
def fixLowBloodAccounts():
    """
    X·ª≠ l√Ω c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi v√¨ th·∫•p m√°u.
    """
    print("üîß ƒêang x·ª≠ l√Ω c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi v√¨ th·∫•p m√°u...")
    list_control = None

    for attempt in range(3):
        try:
            print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
            # backend = GF.get_backend()
            nameAutoVLBS = GF.getNameAutoVLBS()
            GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS)
            app = Application(backend="uia").connect(title_re=nameAutoVLBS)
            dlg = app.window(title_re=nameAutoVLBS)

            # L·∫•y t·∫•t c·∫£ control lo·∫°i List trong c·ª≠a s·ªï
            list_controls = dlg.descendants(control_type="List")

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† l·∫•y theo ƒëi·ªÅu ki·ªán
            if len(list_controls) == 3:
                print("C√≥ 3 List control, l·∫•y c√°i ƒë·∫ßu ti√™n.")
                list_control = list_controls[2]  # l·∫•y c√°i ƒë·∫ßu ti√™n
            else:
                list_control = dlg.child_window(control_type="List")  # m·∫∑c ƒë·ªãnh n·∫øu ch·ªâ c√≥ 1   
            break  # Tho√°t v√≤ng l·∫∑p n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi ƒë·∫øn ·ª©ng d·ª•ng l·∫ßn {attempt + 1}: {e}")
            time.sleep(2)

    # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
    items = list_control.children(control_type="ListItem")
    for i, item in enumerate(items):
        countChild = 0
        for child in item.children():
            if countChild == 0:
                account_name = child.window_text()
            if countChild == 1:
                blood_account = child.window_text()
                print(f"M√°u c·ªßa t√†i kho·∫£n {account_name} l√†: {blood_account}")
                if blood_account == "":
                    continue  # B·ªè qua n·∫øu m√°u kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã
                if blood_account != "Boss" and int(blood_account) < 600:
                    scroll_to_list_item(list_control, i)
                    # Nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c n√†y
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ m·ªü game
                    # Gi·∫£ l·∫≠p vi·ªác s·ª≠a l·ªói, v√≠ d·ª•: ƒëƒÉng nh·∫≠p l·∫°i
                    # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a l·ªói c·ª• th·ªÉ t·∫°i ƒë√¢y
                    # V√≠ d·ª•: g·ªçi h√†m ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c th·ª±c hi·ªán thao t√°c kh√°c
                    pyautogui.hotkey('alt', 'x')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(global_time_sleep)
                    pyautogui.write(get_password_by_ingame(account_name), interval=0.1)
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(3)
                    time.sleep(global_time_sleep)
                    pyautogui.press('enter')
                    time.sleep(2)
                    pyautogui.hotkey('ctrl', 'g')
                    time.sleep(global_time_sleep)
                    pyautogui.press('esc')
                    time.sleep(2)
                    time.sleep(global_time_sleep)
                    # item.type_keys("{SPACE}")
                    # time.sleep(2)
                    item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ ·∫©n game
                    time.sleep(global_time_sleep)
                    # item.type_keys("{SPACE}")
                    print(f"‚úÖ ƒê√£ s·ª≠a l·ªói th·∫•p m√°u cho t√†i kho·∫£n: {account_name}")
            countChild += 1
    print("üîß Ho√†n th√†nh x·ª≠ l√Ω c√°c t√†i kho·∫£n b·ªã m·∫•t k·∫øt n·ªëi v√¨ th·∫•p m√°u.")

def fix_account_stuck_on_map_Sa_Mac():
    """
    L·∫•y t√™n b·∫£n ƒë·ªì hi·ªán t·∫°i c·ªßa t√†i kho·∫£n ƒëang ho·∫°t ƒë·ªông.
    :return: T√™n b·∫£n ƒë·ªì hi·ªán t·∫°i.
    """
    try:
        list_control = None
        for attempt in range(3):
            try:
                print(f"Th·ª≠ k·∫øt n·ªëi l·∫ßn {attempt + 1}...")
                list_control = Application(backend="uia").connect(title_re='^Quan ly nhan vat.*').window(title_re='^Quan ly nhan vat.*').child_window(control_type="List")
                print("K·∫øt n·ªëi th√†nh c√¥ng!")
                break  # N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
            except Exception as e:
                print(f"L·ªói khi k·∫øt n·ªëi (l·∫ßn {attempt + 1}): {e}")
                nameAutoVLBS = GF.getNameAutoVLBS()
                if not GF.checkBothAutoVlbsAndQuanLyRunning(nameAutoVLBS):
                    app = Application(backend="uia").connect(title_re=nameAutoVLBS)
                    dlg = app.window(title_re=nameAutoVLBS)

                    # L·∫•y t·∫•t c·∫£ control lo·∫°i List trong c·ª≠a s·ªï
                    list_controls = dlg.descendants(control_type="List")

                    # Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† l·∫•y theo ƒëi·ªÅu ki·ªán
                    if len(list_controls) == 3:
                        print("C√≥ 3 List control, l·∫•y c√°i ƒë·∫ßu ti√™n.")
                        list_control = list_controls[2]  # l·∫•y c√°i ƒë·∫ßu ti√™n
                    else:
                        list_control = dlg.child_window(control_type="List")  # m·∫∑c ƒë·ªãnh n·∫øu ch·ªâ c√≥ 1
                    if not list_control:
                        print("Kh√¥ng t√¨m th·∫•y b·∫£ng!")
                    else:
                        try:
                            list_control.set_focus()
                            list_control.type_keys("{HOME}")
                            time.sleep(0.5)  # ƒê·ª£i scroll ho√†n th√†nh
                        except Exception as e:
                            print(f"L·ªói khi scroll: {str(e)}")
                        # T√¨m c√°c m·ª•c trong danh s√°ch v√† nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c ƒë·∫ßu ti√™n
                        items = list_control.children(control_type="ListItem")
                        if items:
                            items[0].right_click_input()
                        else:
                            print("Kh√¥ng c√≥ m·ª•c n√†o trong danh s√°ch!")
                    time.sleep(1)
        items = list_control.children(control_type="ListItem")
        for i, item in enumerate(items):
            account_name = ""
            account_map = ""
            countChild = 0
            for child in item.children():
                if countChild == 1:
                    account_name = child.window_text()
                if countChild == 8:
                    account_map = child.window_text()
                    if account_map.lower().startswith("sa m¬πc ¬Æ√ûa bi√ìu".lower()):
                        print(f"Account {account_name} ƒëang ·ªü b·∫£n ƒë·ªì Sa m·∫°c ƒê·ªãa Bi·ªÉu!")
                        scroll_to_list_item(list_control, i)
                        # Nh·∫•p chu·ªôt ph·∫£i v√†o m·ª•c n√†y
                        item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ m·ªü game
                        pyautogui.hotkey('alt', 'x')
                        time.sleep(global_time_sleep)
                        pyautogui.press('enter')
                        time.sleep(global_time_sleep)
                        pyautogui.press('enter')
                        time.sleep(global_time_sleep)
                        pyautogui.press('enter')
                        time.sleep(global_time_sleep)
                        pyautogui.write(get_password_by_ingame(account_name), interval=0.1)
                        time.sleep(global_time_sleep)
                        pyautogui.press('enter')
                        time.sleep(3)
                        time.sleep(global_time_sleep)
                        pyautogui.press('enter')
                        time.sleep(2)
                        pyautogui.hotkey('ctrl', 'g')
                        time.sleep(global_time_sleep)
                        pyautogui.press('esc')
                        time.sleep(2)
                        time.sleep(global_time_sleep)
                        # item.right_click_input()
                        # item.type_keys("{DOWN}")  # 1
                        # item.type_keys("{DOWN}")  # 2
                        # item.type_keys("{DOWN}")  # 3
                        # item.type_keys("{DOWN}")  # 4
                        # item.type_keys("{DOWN}")  # 5
                        # item.type_keys("{DOWN}")  # 6
                        # item.type_keys("{DOWN}")  # 7
                        # pyautogui.press('enter')
                        # time.sleep(2)
                        item.click_input(double=True) # Nh·∫•p ƒë√∫p v√†o m·ª•c ƒë·ªÉ ·∫©n game
                        time.sleep(global_time_sleep)
                        # item.right_click_input()
                        # item.type_keys("{DOWN}")  # 1
                        # pyautogui.press('enter')
                        print(f"‚úÖ ƒê√£ s·ª≠a l·ªói k·∫πt map Sa M·∫°c cho t√†i kho·∫£n: {account_name}")
                countChild += 1

        # messagebox.showinfo("D·ªØ li·ªáu:", gom_accounts_info_data)
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra t√†i kho·∫£n: {e}")

# # test h√†m fixErrorAccounts
# def start_fixing(error_accounts_array):
#     global stop_flag
#     stop_flag = False
#     t = threading.Thread(target=fixErrorAccounts, args=(error_accounts_array,), daemon=True)
#     t.start()
#     print("üîÅ B·∫Øt ƒë·∫ßu s·ª≠a...")

# # test h√†m fixLowBloodAccounts
# def start_fixing(error_accounts_array):
#     global stop_flag
#     stop_flag = False
#     t = threading.Thread(target=fixLowBloodAccounts, args=(), daemon=True)
#     t.start()
#     print("üîÅ B·∫Øt ƒë·∫ßu s·ª≠a...")

# # test h√†m l·∫•y t√™n b·∫£n ƒë·ªì hi·ªán t·∫°i
# def start_fixing(error_accounts_array):
#     global stop_flag
#     stop_flag = False
#     t = threading.Thread(target=fix_account_stuck_on_map_Sa_Mac, args=(), daemon=True)
#     t.start()
#     print("üîÅ B·∫Øt ƒë·∫ßu l·∫•y b·∫£n ƒë·ªì...")

# # test h√†m relogin_lost_accounts
# def start_fixing(error_accounts_array):
#     global stop_flag
#     stop_flag = False
#     t = threading.Thread(target=relogin_lost_accounts, args=(), daemon=True)
#     t.start()
#     print("üîÅ B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† relogin!")

# test h√†m connect mongodb
def load_title_mail(filepath='monitor_time.json'):
    try:
        with open(os.path.join(GF.join_directory_data(), filepath), 'r') as f:
            data = json.load(f)
            return float(data['title_mail'])
    except FileNotFoundError:
        # N·∫øu file kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
        print(f"File {filepath} kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh 1.")
        return 1.0

def load_accounts_data(file_path='accounts.json'):
    with open(os.path.join(GF.join_directory_data(), file_path), 'r') as f:
        data = json.load(f)
        return data
    
def connect_mongodb():
    try:
        import pymongo
        import json
        import datetime
        from pymongo.mongo_client import MongoClient
        from pymongo.server_api import ServerApi

        # === 1. K·∫øt n·ªëi MongoDB Atlas ===
        mongo_uri = "mongodb+srv://htechvolam:Htech317@htechvolam.oefc26z.mongodb.net/?retryWrites=true&w=majority&appName=HtechVolam"
        # Create a new client and connect to the server
        client = MongoClient(mongo_uri)
        client.admin.command('ping')
        print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")


        # === 2. Ch·ªçn database v√† collection ===
        db = client["HtechVolam"]
        collection = db["money_monitor"]

        # === 3. Load d·ªØ li·ªáu t·ª´ file ===
        ten_may = int(load_title_mail())
        new_data = load_accounts_data()
        new_accounts = new_data.get("accounts", [])

        # === 4. T√¨m document theo t√™n m√°y v√† group ===
        existing_doc = collection.find_one({"ten_may": ten_may})

        if existing_doc:
            print(f"üîÅ ƒê√£ c√≥ d·ªØ li·ªáu m√°y {ten_may}. ƒêang c·∫≠p nh·∫≠t...")

            # L·∫•y danh s√°ch username hi·ªán c√≥
            existing_usernames = {acc["username"] for acc in existing_doc.get("accounts", [])}

            # L·ªçc ra nh·ªØng account m·ªõi ch∆∞a c√≥
            new_unique_accounts = [acc for acc in new_accounts if acc["username"] not in existing_usernames]

            if new_unique_accounts:
                # C·∫≠p nh·∫≠t th√™m account m·ªõi v√†o m·∫£ng accounts
                collection.update_one(
                    {"_id": existing_doc["_id"]},
                    {"$push": {"accounts": {"$each": new_unique_accounts}}}
                )
                print(f"‚úÖ ƒê√£ th√™m {len(new_unique_accounts)} account m·ªõi v√†o m√°y {ten_may}.")
            else:
                print("‚úÖ Kh√¥ng c√≥ account m·ªõi ƒë·ªÉ th√™m.")

        else:
            # Ch∆∞a c√≥ th√¨ th√™m m·ªõi to√†n b·ªô
            new_data["ten_may"] = ten_may
            new_data["ngay"] = datetime.datetime.now().strftime("%Y-%m-%d")
            collection.insert_one(new_data)
            print(f"‚úÖ ƒê√£ th√™m m·ªõi m√°y {ten_may}.")

    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")

def start_fixing(error_accounts_array):
    global stop_flag
    stop_flag = False
    t = threading.Thread(target=connect_mongodb, args=(), daemon=True)
    t.start()
    print("üîÅ B·∫Øt ƒë·∫ßu s·ª≠a...")

def stop_fixing():
    global stop_flag
    stop_flag = True
    print("‚õî Y√™u c·∫ßu d·ª´ng s·ª≠a.")

if __name__ == "__main__":
    connect_mongodb()